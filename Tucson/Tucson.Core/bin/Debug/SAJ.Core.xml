<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SAJ.Core</name>
    </assembly>
    <members>
        <member name="T:SAJ.Core.CallingMethod">
            <summary>
            Wraps some static methods that make it easy to determine the calling method's name (useful for logging/monitoring)
            </summary>
        </member>
        <member name="M:SAJ.Core.CallingMethod.GetCallingMethodName(System.Int32)">
            <summary>
            Returns the name of a method in the stack.  By default, it returns the name of the method calling your method.
            </summary>
            <param name="frameOffset">Method in the stack trace to return.  0 == your method, 1 == the method calling you, etc.</param>
            <returns>The name of the method</returns>
        </member>
        <member name="M:SAJ.Core.CallingMethod.GetCallingMethodName(SAJ.Core.CallingMethod.CallingMethodNameReturnTypes,System.Int32)">
            <summary>
            Returns the name of a method in the stack.  By default, it returns the name of the method calling your method.
            </summary>
            <param name="returnType">Include the name of the class/namespace in the result</param>
            <param name="frameOffset">Method in the stack trace to return.  0 == your method, 1 == the method calling you, etc.</param>
            <returns>The name of the method</returns>
        </member>
        <member name="T:SAJ.Core.CallingMethod.CallingMethodNameReturnTypes">
            <summary>
            Specifies what to return in the result for the method name
            </summary>
        </member>
        <member name="F:SAJ.Core.CallingMethod.CallingMethodNameReturnTypes.Name">
            <summary>
            Include the name (default)
            </summary>
        </member>
        <member name="F:SAJ.Core.CallingMethod.CallingMethodNameReturnTypes.Class">
            <summary>
            The name and class name for the method
            </summary>
        </member>
        <member name="F:SAJ.Core.CallingMethod.CallingMethodNameReturnTypes.Namespace">
            <summary>
            The name, class and namespace for the method
            </summary>
        </member>
        <member name="T:SAJ.Core.CanonicalFlags">
            <summary>
            Flags used by the MakeCanonical method
            </summary>
        </member>
        <member name="F:SAJ.Core.CanonicalFlags.Default">
            <summary>
            Use default canonicalization
            </summary>
        </member>
        <member name="F:SAJ.Core.CanonicalFlags.ConvertAmpersand">
            <summary>
            Convert the &amp; to the word "and"
            </summary>
        </member>
        <member name="F:SAJ.Core.CanonicalFlags.KeepNoiseWords">
            <summary>
            Keeps words like: the, a, by, of, for
            </summary>
        </member>
        <member name="F:SAJ.Core.CanonicalFlags.DoNotCanonicalize">
            <summary>
            Performs no canonicalization, returns the original value
            </summary>
        </member>
        <member name="F:SAJ.Core.CanonicalFlags.ReplaceDashes">
            <summary>
            Replaces dash characters with a space
            </summary>
        </member>
        <member name="T:SAJ.Core.CasingHelper">
            <summary>
            Helper Class for Text Casing
            </summary>
        </member>
        <member name="M:SAJ.Core.CasingHelper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SAJ.Core.CasingHelper"/> class from being created.
            </summary>
        </member>
        <member name="M:SAJ.Core.CasingHelper.ToUpper(System.Char)">
            <summary>
            Returns Upper Case version of a character
            </summary>
            <param name="c">Character to Upper Case</param>
            <returns>Upper Case version of character</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.ToLower(System.Char)">
            <summary>
            Returns Lower Case version of a character
            </summary>
            <param name="c">Character to Lower Case</param>
            <returns>Lower Case version of character</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsAlpha(System.Char)">
            <summary>
            Checks to see if a character is an alpha (a-z or A-Z)
            </summary>
            <param name="c">Character to check</param>
            <returns>True if the character is an Alpha character</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsDigit(System.Char)">
            <summary>
            Checks to see if a character is a number
            </summary>
            <param name="c">Character to check</param>
            <returns>True if the character is a number</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsVowel(System.Char)">
            <summary>
            Checks to see if a character is a vowel (aeiouy or AEIOUY)
            </summary>
            <param name="c">Character to check</param>
            <returns>True if the character is a vowel</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsConsonant(System.Char)">
            <summary>
            Checks to see if a character is a consonant (bcdfghjklmnpqrstvwxz or BCDFGHJKLMNPQRSTVWXZ)
            </summary>
            <param name="c">Character to check</param>
            <returns>True if the character is a consonant</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsEmailAddress(System.String)">
            <summary>
            Check to see if text is an email address
            </summary>
            <param name="text">Text to check</param>
            <returns>True if the text is an email address</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsUrl(System.String)">
            <summary>
            Checks to see if text is a web Url
            </summary>
            <param name="text">Text to check</param>
            <returns>True if the text is a Url</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsUrlExtension(System.String)">
            <summary>
            Checks to see if text is a web Url extension
            </summary>
            <param name="text">Text to check</param>
            <returns>True if the text is a Url extension</returns>
        </member>
        <member name="M:SAJ.Core.CasingHelper.IsWebAddress(System.Char[],System.Int32)">
            <summary>
            Checks to see if text is a web address, like an email address or url
            </summary>
            <param name="text">Array of characters to check</param>
            <param name="currentIndex">Index to start in the character array</param>
            <returns>True is the text is a web address</returns>
        </member>
        <member name="P:SAJ.Core.CasingHelper.Instance">
            <summary>
            Gets a new instance of the <see cref="T:SAJ.Core.CasingHelper"/> class.
            </summary>
        </member>
        <member name="T:SAJ.Core.Collections.ThreadedEnumerable`1">
            <summary>
            Allows enumerating over a collection across multiple threads.
            </summary>
            <typeparam name="T">The type of instances inside the enumeration.</typeparam>
        </member>
        <member name="M:SAJ.Core.Collections.ThreadedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.Collections.ThreadedEnumerable`1"/> class.
            </summary>
            <param name="collection">The collection to make thread-able.</param>
            <param name="batchSize">This will pull out items in the enumeration in batches, change this setting to adjust how big the batches should be.</param>
        </member>
        <member name="M:SAJ.Core.Collections.ThreadedEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SAJ.Core.Collections.ThreadedEnumerable`1.GetNext">
            <summary>
            Gets the next item in the collection.
            </summary>
            <returns>The instance to process, or NULL if nothing left to iterate.</returns>
        </member>
        <member name="M:SAJ.Core.Collections.ThreadedEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SAJ.Core.Collections.ThreadedEnumerable`1.Thread">
            <summary>
            The method to run in the thread that enqueues the next item to be pulled off the list.
            </summary>
        </member>
        <member name="P:SAJ.Core.Collections.ThreadedEnumerable`1.BatchSize">
            <summary>
            The size of the items to pull out in batches of.
            </summary>
        </member>
        <member name="P:SAJ.Core.Collections.ThreadedEnumerable`1.Collection">
            <summary>
            The underlying connection.
            </summary>
        </member>
        <member name="T:SAJ.Core.Configuration.AppSettingsValueAttribute">
            <summary>
            Creates an attribute that indicates the property's value should come from the AppSettings in the config file
            </summary>
        </member>
        <member name="T:SAJ.Core.Configuration.SettingsValueAttribute">
            <summary>
            Creates an attribute that indicates the property's value should come from the AppSettings in the config file
            </summary>
            <summary>
            Set property values for objects that have properties with an AppSettingsValueAttribute
            </summary>
        </member>
        <member name="F:SAJ.Core.Configuration.SettingsValueAttribute.EncryptedSettingPrefix">
            <summary>
            Value that is prefixed to all encrypted settings (returned by EncryptValue)
            </summary>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GetValue(System.String)">
            <summary>
            Returns the value for the given key value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GetSettingsValueKey``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the key value specified for a given member property
            </summary>
            <typeparam name="T">The type of class</typeparam>
            <typeparam name="TR">The type of the property</typeparam>
            <param name="me">An instance of the class</param>
            <param name="getMember">An expression that returns a property from T</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.EncryptValue(System.String,System.String,System.String)">
            <summary>
            Encryptes a value suitable for storing in an configuration file.
            </summary>
            <param name="plaintext">The text to encrypt</param>
            <param name="password">The password to use</param>
            <param name="publickey">The public key of the machine that will be decrypting the value</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GenerateEncryptionSalt(System.String)">
            <summary>
            Generates the encryption salt based on a string value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.DecryptValue(System.String)">
            <summary>
            Decryptes the value if the value starts with EncryptedSettingPrefix.  Use SettingsValueAttribute.EncryptValue() to encrypt.
            </summary>
            <param name="value">The value to decrypt</param>
            <returns>The plain-text value</returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.SetValues(System.Object)">
            <summary>
            For all properties that have AppSettingsValueAttribute Sets the null values of all properties of the settings object with an 
            </summary>
            <param name="settings">The object to set</param>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GetActions(System.Type)">
            <summary>
            Gets an array of the actions to perform on a type to set it's settings values
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GenerateActions(System.Type)">
            <summary>
            Generates the actions to perform on a type to set it's settings values
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Configuration.SettingsValueAttribute.GetGetterSetter``1(``0)">
            <summary>
            Updates the prop with an appropriate Getter/setter for a given property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.Key">
            <summary>
            Gets or sets the Key for the AppSettings entry.
            </summary>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.Value">
            <summary>
            Gets or sets the Value for the AppSettings entry.  Default: the Key's value
            </summary>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.Password">
            <summary>
            Gets or sets a password used for encrypted settings.  Password is optional, a default password may be used.  To encrypt a value, use SettingsValueAttribute.EncryptValue()
            </summary>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.IlMode">
            <summary>
            Toggles the IL code generation mode for optimizations (default: True)
            </summary>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.NestedISAJSettingsPropertyInfoDetails.Creator">
            <summary>
            Function that creates a new instance of the property's type (may throw an exception if the type does not have a default constructor)
            </summary>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsValueAttribute.NestedISAJSettingsPropertyInfoDetails.Actions">
            <summary>
            The list of actions to perform against the property's class
            </summary>
        </member>
        <member name="T:SAJ.Core.Configuration.ConnectionStringsValueAttribute">
            <summary>
            Creates an attribute that indicates the property's value should come from the AppSettings in the config file
            </summary>
        </member>
        <member name="T:SAJ.Core.Configuration.ISAJSettings">
            <summary>
            Marker interface for all SAJ Settings interfaces
            </summary>
        </member>
        <member name="T:SAJ.Core.Configuration.ProviderWithSettingsFactory">
            <summary>
            Provider factory for classes with ISajSettings
            </summary>
        </member>
        <member name="M:SAJ.Core.Configuration.ProviderWithSettingsFactory.SetProviderCreator``2(System.Func{``1,``0})">
            <summary>
            Sets the provider creator method for the type
            </summary>
            <typeparam name="T">The type of the provider</typeparam>
            <typeparam name="TSettings">The type of the settings</typeparam>
            <param name="creator">The method to create the provider</param>
        </member>
        <member name="M:SAJ.Core.Configuration.ProviderWithSettingsFactory.CreateProvider``2(``1,System.Boolean)">
            <summary>
            Creates a new provider
            </summary>
            <typeparam name="T">The type of the provider</typeparam>
            <typeparam name="TSettings">The type of the settings</typeparam>
            <param name="settings">The settings instance</param>
            <param name="setSettings">A flag that, when set, calls SettingsValueAttribute.SetValues() on the settings instance to set default values</param>
            <returns>A new instance of the provider</returns>
        </member>
        <member name="T:SAJ.Core.Configuration.SettingsBase`1">
            <summary>
            Base class that wraps a default instance for a class that implements ISAJSettings
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SAJ.Core.Configuration.SettingsBase`1.Default">
            <summary>
            Default instance of <typeparam name="T">settings class</typeparam>
            </summary>
        </member>
        <member name="T:SAJ.Core.Crc32">
            <summary>
            calculates common 32-bit CRC for a bytestream or string
            </summary>
        </member>
        <member name="M:SAJ.Core.Crc32.Calculate(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Calculate the 32-bit CRC for a stream, starting at an arbitrary position and length
            </summary>
            <param name="strm"></param>
            <param name="begin"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Crc32.Calculate(System.IO.Stream)">
            <summary>
            Calculate the 32-bit CRC for an entire stream
            </summary>
            <param name="strm"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Crc32.Calculate(System.String)">
            <summary>
            Calculate the 32-bit CRC for a string; uses default Windows-1252 encoding
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Crc32.Calculate(System.String,System.Text.Encoding)">
            <summary>
            Calculate the 32-bit CRC for a string, using specified encoding
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.Crc32.Calculate(System.Byte[])">
            <summary>
            Calculate the 32-bit CRC for an array of bytes
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.ParallelEnumerableExtensionMethods">
            <summary>Class for all Parallel IEnumerable&lt;T&gt; extension methods</summary>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.SelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            (SAJ.Core) Selects an enumeration of items using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="selector">The selector that returns a TR for a given T</param>
            <returns>A enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.SelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32)">
            <summary>
            (SAJ.Core) Selects an enumeration of items using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="selector">The selector that returns a TR for a given T</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
            <returns>A enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.DoSelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Nullable{System.Int32})">
            <summary>
            (SAJ.Core) Selects an enumeration of items using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="selector">The selector that returns a TR for a given T</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
            <returns>A enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.SelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            (SAJ.Core) Selects an enumeration of items in batches using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of each batch</param>
            <param name="selector">The selector that operates on a list of T and returns an enumeration of TR</param>
            <returns>An enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.SelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1}},System.Int32)">
            <summary>
            (SAJ.Core) Selects an enumeration of items in batches using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of each batch</param>
            <param name="selector">The selector that operates on a list of T and returns an enumeration of TR</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
            <returns>An enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.DoSelectInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1}},System.Nullable{System.Int32})">
            <summary>
            (SAJ.Core) Selects an enumeration of items in batches using parallelism
            </summary>
            <typeparam name="T">The type of items in the first enumeration</typeparam>
            <typeparam name="TR">The return type of the selector</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of each batch</param>
            <param name="selector">The selector that operates on a list of T and returns an enumeration of TR</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
            <returns>An enumeration of TR</returns>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.ForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            (SAJ.Core) Performs an action on an enumeration using parallelism
            </summary>
            <typeparam name="T">The type of items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="action">The action to perform on each item in the enumeration</param>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.ForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)">
            <summary>
            (SAJ.Core) Performs an action on an enumeration using parallelism
            </summary>
            <typeparam name="T">The type of items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="action">The action to perform on each item in the enumeration</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.DoForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Nullable{System.Int32})">
            <summary>
            (SAJ.Core) Performs an action on an enumeration using parallelism
            </summary>
            <typeparam name="T">The type of items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="action">The action to perform on each item in the enumeration</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.ForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Collections.Generic.List{``0}})">
            <summary>
            (SAJ.Core) Performs an action on an enumeration of objects in batches using parallelism
            </summary>
            <typeparam name="T">The type of the items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of the batch</param>
            <param name="action">The action to perform on the batch of T</param>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.ForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Collections.Generic.List{``0}},System.Int32)">
            <summary>
            (SAJ.Core) Performs an action on an enumeration of objects in batches using parallelism
            </summary>
            <typeparam name="T">The type of the items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of the batch</param>
            <param name="action">The action to perform on the batch of T</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
        </member>
        <member name="M:System.Linq.ParallelEnumerableExtensionMethods.DoForAllInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Collections.Generic.List{``0}},System.Nullable{System.Int32})">
            <summary>
            (SAJ.Core) Performs an action on an enumeration of objects in batches using parallelism
            </summary>
            <typeparam name="T">The type of the items in the enumeration</typeparam>
            <param name="list">The enumeration</param>
            <param name="batchSize">The maximum size of the batch</param>
            <param name="action">The action to perform on the batch of T</param>
            <param name="degreeOfParallelism">The number of threads to use for the query</param>
        </member>
        <member name="T:SAJ.Core.BindWaitHandleToCancellationTokenSource">
            <summary>
            Binds a ManualResetEvent to a CancellationTokenSource.  So when a ManualResetEvent is set, the CancellationToken is cancelled
            </summary>
        </member>
        <member name="M:SAJ.Core.BindWaitHandleToCancellationTokenSource.#ctor(System.Threading.WaitHandle,System.Threading.CancellationTokenSource)">
            <summary>
            Binds a WaitHandle to a CancellationTokenSource.  So when a WaitHandle is set, the CancellationToken is cancelled
            </summary>
            <param name="waitHandle">The waitable handle</param>
            <param name="tokenSource">The token source</param>
        </member>
        <member name="T:SAJ.Core.ConverterExtensions">
            <summary>
            Extensions to the Convert class (sort of)
            </summary>
        </member>
        <member name="M:SAJ.Core.ConverterExtensions.ToBase64StringForUrl(System.Byte[])">
            <summary>
            Converts a byte array to a base64url string that can be safely used in a URL query string.  Based on RFC4648.
            </summary>
            <seealso cref="!:http://tools.ietf.org/html/rfc4648"/>
            <param name="bytes">The bytes to convert</param>
            <returns>A string representation of the bytes in base64</returns>
        </member>
        <member name="M:SAJ.Core.ConverterExtensions.FromBase64StringForUrl(System.String)">
            <summary>
            Converts a base64url encoded to its original binary array.
            </summary>
            <seealso cref="!:http://tools.ietf.org/html/rfc4648"/>
            <param name="str">The base64url encoded string.</param>
            <returns>The original byte array, or null if the string is null or empty.</returns>
        </member>
        <member name="T:SAJ.Core.IO.Directory">
            <summary>
            Methods for working with directories
            </summary>
        </member>
        <member name="M:SAJ.Core.IO.Directory.DeleteDirectory(System.String)">
            <summary>
            Deletes an entire directory, including all files, even if they are read-only.
            </summary>
            <param name="target_dir">The directory to remove.</param>
        </member>
        <member name="T:SAJ.Core.LazyCache`1">
            <summary>
            A generic class that encapsulates a lazily created object of type T.  The object is checked for refresh needed on a regular interval.  This class is thread safe, and must be disposed properly!
            </summary>
            <typeparam name="T">Any object to be cached</typeparam>
        </member>
        <member name="M:SAJ.Core.LazyCache`1.#ctor(System.Func{`0},System.Func{System.Lazy{`0},System.Boolean},System.Action{System.Exception},System.TimeSpan)">
            <summary>
            Creates a lazy object that is cached until the refreshNeeded delegate returns true.  If T is IDisposable, it will be properly disposed.
            </summary>
            <param name="creator">The delegate that creates the instance of the object.  Make sure this delegate traps exceptions and always returns a sensible result.</param>
            <param name="refreshNeeded">Delegate that returns true when the data needed to be re-created.  Parameter is the current Lazy value.</param>
            <param name="exceptionHandler">A delegate that is called when an exception occurs.</param>
            <param name="checkInterval">Interval between calls to refreshNeeded delegate.</param>
        </member>
        <member name="M:SAJ.Core.LazyCache`1.Refresh">
            <summary>
            Forces a refresh of the lazy value
            </summary>
        </member>
        <member name="M:SAJ.Core.LazyCache`1.Dispose">
            <summary>
            Disposes stuff
            </summary>
        </member>
        <member name="P:SAJ.Core.LazyCache`1.IsValueCreated">
            <summary>
            Gets a value indicated the lazy value is created
            </summary>
        </member>
        <member name="P:SAJ.Core.LazyCache`1.Value">
            <summary>
            Gets the lazily created value
            </summary>
        </member>
        <member name="P:SAJ.Core.LazyCache`1.CheckInterval">
            <summary>
            Gets or set the CheckInterval timeout.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.ResumableProcess`1">
            <summary>
            Provides a way to store a list of things to do so that it can be resumed across application runs.
            </summary>
            <typeparam name="T">The type of item to store.</typeparam>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.ResumableProcess`1.#ctor(SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.Process.Resumable.ResumableProcess`1"/> class.
            </summary>
            <param name="dataStore">The data store to store the processes to.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.ResumableProcess`1.Reset">
            <summary>
            Resets/clears all of the items to process.
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.ResumableProcess`1.MarkComplete(`0)">
            <summary>
            Marks a given process as complete.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.ResumableProcess`1.Populate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Provide the list of all the items to process.
            </summary>
            <param name="itemsToProcess">The items to process. It is strongly encouraged that the collection uses deferred execution and streams the values into when the collection is particularly large to ensure we do not have memory issues.</param>
            <remarks>This method MUST complete running before this process can be resume-able.</remarks>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.ResumableProcess`1.GetItemsToProcess">
            <summary>
            Gets a stream of items to process.  Each item must be marked as complete in order to prevent being reprocessed.
            </summary>
            <returns>The items to process.</returns>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.ResumableProcess`1.DataStore">
            <summary>
            Gets the data store used to store the processes to run.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.IKeyedEntity`1">
            <summary>
            Represents an item that has a unique key.
            </summary>
            <typeparam name="T">The type of key.</typeparam>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.IKeyedEntity`1.Key">
            <summary>
            Gets the unique key of the entity.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1">
            <summary>
            Represents a storage location for a certain type of data.
            </summary>
            <typeparam name="T">The type of data to store.</typeparam>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.Reset">
            <summary>
            Removes all items from data store.
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.GetAll">
            <summary>
            Gets all of the items in the data store.
            </summary>
            <returns>All of the items in the data store.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.Remove(System.String)">
            <summary>
            Removes a specific item in the data store.
            </summary>
            <param name="itemKey">The key to the item in the data store to remove.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.Store(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Stores the given collection of items to the data store.
            </summary>
            <param name="items">The items to store.</param>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.LastStored">
            <summary>
            Gets the date the data was last stored.
            </summary>
            <remarks>This returns the date the data was last stored. This is expected to be durable.</remarks>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1.ItemsRemaining">
            <summary>
            Gets the number of items stored in repository. This is expected to be the current count ... does not have to be accurate.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.CountClass">
            <summary>
            Provides a thread safe way to keep track of counts.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation">
            <summary>
            Provides information about a <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1"/>.
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.DataStoreInformationFileName">
            <summary>
            The name of the file containing useful information
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation"/> class.
            </summary>
            <param name="lastStoreDateUtc">The date the data was last stored.</param>
            <param name="itemsPerFile">The number of items stored per file.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.Delete(System.String)">
            <summary>
            Deletes the information about a file store at a given location.
            </summary>
            <param name="rootPath">The path to delete the information from.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.Read(System.String)">
            <summary>
            Reads the information from a given path/directory.
            </summary>
            <param name="rootPath">The directory/path to read from.</param>
            <returns>The information at that location.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.Store(System.String,SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation)">
            <summary>
            Stores the information to the given directory.
            </summary>
            <param name="rootPath">The directory/path to save to.</param>
            <param name="storeInfo">The information to store.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.GetFileName(System.String)">
            <summary>
            Gets the file name containing the information for the data store.
            </summary>
            <param name="rootPath">The path containing the information.</param>
            <returns>The full path to the file name.</returns>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.LastStoreDateUtc">
            <summary>
            Gets the date the data was last stored.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemDataStoreInformation.ItemsPerFile">
            <summary>
            Gets the number of items stored per file.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1">
            <summary>
            Stores data in regions to the file system.
            </summary>
            <typeparam name="T">The type of data to store.</typeparam>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1">
            <summary>
            Represents the interface for anything wishing to store data into regions.
            </summary>
            <typeparam name="T">The type of object to store in a region.</typeparam>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.Reset">
            <summary>
            Removes all items from data store.
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.GetAll">
            <summary>
            Gets all of the items in the data store.
            </summary>
            <remarks>Returns a <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1"/> so that we can determine which region it belongs to.</remarks>
            <returns>All of the items in the data store.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.Remove(System.String)">
            <summary>
            Removes a specific region in the data store.
            </summary>
            <param name="regionKey">The region key to the item in the data store to remove.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.Store(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Stores the given collection of items to the data store.
            </summary>
            <param name="items">The items to store.</param>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.LastStored">
            <summary>
            Gets the date the data was last stored.
            </summary>
            <remarks>This returns the date the data was last stored. This is expected to be durable.</remarks>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1.ItemsRemaining">
            <summary>
            Gets the number of items stored in repository. This is expected to be the current count ... does not have to be accurate.
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.DefaultFilesPerDirectory">
            <summary>
            The default number of files to keep per directory.
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.DefaultItemsPerFile">
            <summary>
            The default number of items to store per file
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.SubFolderName">
            <summary>
            The name of the subfolder to create to place the files into (in case it is using the temp folder, this ensures its all by itself)
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.FileExtension">
            <summary>
            Gets the file extension to use in storing files.
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.NumberFormat">
            <summary>
            The format to use in naming files
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1"/> class.
            </summary>
            <param name="uniqueRootPath">The path to write the files to. This path should be unique, and is not supported to run more than on instance of this against the same directory. Defaults to the TEMP directory if you pass NULL, but if you are resuming this is a dangerous path to use.</param>
            <param name="itemsPerFile">The number of items to add per file.</param>
            <param name="filesPerDirectory">The number of files to have per directory.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.Reset">
            <summary>
            Removes all items from data store.
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.GetAll">
            <summary>
            Gets all of the items in the data store.
            </summary>
            <returns>All of the items in the data store.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.GetFileNames(System.String)">
            <summary>
            Gets all of the file names for this data store.
            </summary>
            <param name="rootPath">The root path to check.</param>
            <returns>A collection of file names.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.Remove(System.String)">
            <summary>
            Removes a specific region in the data store.
            </summary>
            <param name="regionKey">The region key to the item in the data store to remove.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.Store(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Stores the given collection of items to the data store.
            </summary>
            <param name="items">The items to store.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.CreateRandomFile(System.IO.DirectoryInfo,System.Int64)">
            <summary>
            Create a random file to write to.
            </summary>
            <param name="currentDirectory">The directory to create the file under.</param>
            <param name="fileCount">The current count of files per directory.</param>
            <returns>The stream to the newly create file.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.CreateRandomSubdirectory(System.IO.DirectoryInfo,System.Int64)">
            <summary>
            Creates a new randomly named sub directory.
            </summary>
            <param name="rootDirectoryInfo">The root directory to create the sub directory under.</param>
            <param name="directoryCount">The current count of directories created.</param>
            <returns>The information about the directory created.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.CreateRootDirectory(System.String)">
            <summary>
            Ensures the root directory this will write to exists and is valid.
            </summary>
            <param name="rootPath">The path to create/validate.</param>
            <returns>The path to the directory to use to write to.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures the given directory exists.
            </summary>
            <param name="rootPath">The directory to check.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.GetLastStoreDateUtc(System.String)">
            <summary>
            Gets the date the data was last stored.
            </summary>
            <param name="rootPath">The path the data was stored.</param>
            <returns>The date the data was last stored.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.GetFileSystemDataStoreInformation(System.String)">
            <summary>
            Gets the information about the storage.
            </summary>
            <param name="rootPath">The root path to the storage.</param>
            <returns>The information, if available.</returns>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.FilesPerDirectory">
            <summary>
            Gets the number of files to create per directory.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.ItemsPerFile">
            <summary>
            Gets the number of items to store per file.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.LastStored">
            <summary>
            Gets the date the data was last stored.
            </summary>
            <remarks>This returns the date the data was last stored. This is expected to be durable.</remarks>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.ItemsRemaining">
            <summary>
            Gets the number of items stored in repository. This is expected to be the current count ... does not have to be accurate.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.FileSystemRegionDataStore`1.RootPath">
            <summary>
            Gets the root path all data is written to.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1">
            <summary>
            Wraps up a <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1"/> to work as an <see cref="T:SAJ.Core.Process.Resumable.Storage.IObjectProcessDataStore`1"/>
            </summary>
            <typeparam name="T">The type of object to store.</typeparam>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.itemToRegionDictionary">
            <summary>
            Keeps track of the mapping of a region to an item.
            </summary>
        </member>
        <member name="F:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.regionDictionary">
            <summary>
            Keeps track of the regions returned and how many have been processed
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.#ctor(SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1"/> class.
            </summary>
            <param name="dataStore">The underlying data store to wrap.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.Reset">
            <summary>
            Removes all items from data store.
            </summary>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.GetAll">
            <summary>
            Gets all of the items in the data store.
            </summary>
            <returns>All of the items in the data store.</returns>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.Remove(System.String)">
            <summary>
            Removes a specific item in the data store.
            </summary>
            <param name="itemKey">The key to the item in the data store to remove.</param>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.Store(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Stores the given collection of items to the data store.
            </summary>
            <param name="items">The items to store.</param>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.DataStore">
            <summary>
            Gets the underlying data store that keeps data in regions.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.LastStored">
            <summary>
            Gets the date the data was last stored.
            </summary>
            <remarks>This returns the date the data was last stored. This is expected to be durable.</remarks>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.RegionedDataStore`1.ItemsRemaining">
            <summary>
            Gets the number of items stored in repository. This is expected to be the current count ... does not have to be accurate.
            </summary>
        </member>
        <member name="T:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1">
            <summary>
            Represents an item stored in an <see cref="T:SAJ.Core.Process.Resumable.Storage.Regioned.IRegionedDataStore`1"/>
            </summary>
            <typeparam name="T">The type of item being stored, MUST be serializable.</typeparam>
        </member>
        <member name="M:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1.#ctor(System.String,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="regionKey">The region key this item belongs to.</param>
            <param name="item">The item to store.</param>
            <param name="itemsInRegion">The number of items stored in this region.</param>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1.Item">
            <summary>
            Gets the item being stored.
            </summary>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1.ItemsInRegion">
            <summary>
            Gets the number of items stored in this region.
            </summary>
            <remarks>This exists because the RegionedDataStore that sits on top of this needs to know when all items in a region are complete, and can be removed.</remarks>
        </member>
        <member name="P:SAJ.Core.Process.Resumable.Storage.Regioned.StoredRegionItem`1.RegionKey">
            <summary>
            Gets the region key of the item stored.
            </summary>
        </member>
        <member name="T:SAJ.Core.ActionPool">
            <summary>
            Similar to ThreadPool.QueueUserWorkItem, only it uses a fixed thread pool size.
            </summary>
        </member>
        <member name="M:SAJ.Core.ActionPool.#cctor">
            <summary>Initializes static members of the <see cref="T:SAJ.Core.ActionPool"/> class.</summary>
        </member>
        <member name="M:SAJ.Core.ActionPool.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.ActionPool"/> class.</summary>
            <param name="numWorkerThreads">The number of worker threads. <see cref="T:SAJ.Core.WorkerQueue`1"/></param>
        </member>
        <member name="M:SAJ.Core.ActionPool.Finalize">
            <summary>Finalizes an instance of the <see cref="T:SAJ.Core.ActionPool"/> class. </summary>
        </member>
        <member name="M:SAJ.Core.ActionPool.QueueUserWorkItem(System.Action)">
            <summary>Queues an action to perform in the worker queue</summary>
            <param name="act">The act to perform</param>
        </member>
        <member name="M:SAJ.Core.ActionPool.QueueUserWorkItem(System.Action,System.Action{System.Exception})">
            <summary>Queues an action to perform in the worker queue</summary>
            <param name="act">The act to perform</param>
            <param name="onException">Action to call when an exception occurs</param>
        </member>
        <member name="P:SAJ.Core.ActionPool.Default">
            <summary>
            Gets the default instance of ActionPool.  Uses the ActionPoolDefaultBackgroundThreads app setting.  Default: 4 worker threads.
            </summary>
        </member>
        <member name="P:SAJ.Core.ActionPool.QueuedWorkCount">
            <summary>
            Gets the number of items currently queued for work
            </summary>
        </member>
        <member name="T:SAJ.Core.Reflection.DynamicReflectionDelegateFactory">
            <summary>
            Dynamic reflection delegate factory that returns delegate methods that perform significantly faster than normal reflection means.
            </summary>
        </member>
        <member name="M:SAJ.Core.Reflection.DynamicReflectionDelegateFactory.CreateGetPropertyValue(System.Reflection.PropertyInfo)">
            <summary>
            Creates a GetProperty Func using IL generation
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns>A function that sets a property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.DynamicReflectionDelegateFactory.CreateGetPropertyValue``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates a GetProperty Func using IL generation
            </summary>
            <typeparam name="T">The type of the instance</typeparam>
            <param name="propertyInfo">The property info</param>
            <returns>A function that sets a property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.DynamicReflectionDelegateFactory.CreateSetPropertyValue(System.Reflection.PropertyInfo)">
            <summary>
            Creates a SetProperty Action using IL generation
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns>An action that sets the property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.DynamicReflectionDelegateFactory.CreateSetPropertyValue``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates a SetProperty Action using IL generation
            </summary>
            <typeparam name="T">The type of the instance</typeparam>
            <param name="propertyInfo">The property info</param>
            <returns>An action that sets the property value</returns>
        </member>
        <member name="T:SAJ.Core.Reflection.FastGetterSetter">
            <summary>The fast getter setter.</summary>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.Create``1">
            <summary>The create.</summary>
            <typeparam name="T">A type of a class</typeparam>
            <returns>The <see cref="T:SAJ.Core.Reflection.IFastGetterSetter`1"/>.</returns>
        </member>
        <member name="T:SAJ.Core.Reflection.IFastGetterSetter`1">
            <summary>An interface that defines fast get/set for properties (faster than PropertyInfo.GetValue/SetValue) using IL.  <see cref="T:SAJ.Core.Reflection.FastGetterSetter"/></summary>
            <typeparam name="T">The type to generate against</typeparam>
        </member>
        <member name="M:SAJ.Core.Reflection.IFastGetterSetter`1.GetGetValueFunc(System.Reflection.PropertyInfo)">
            <summary>Gets the function to return value for a given property of type T</summary>
            <param name="prop">The property</param>
            <returns>The function to use to get the property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.IFastGetterSetter`1.GetSetValueFunc(System.Reflection.PropertyInfo)">
            <summary>Gets the function to set a value for a given property of type T</summary>
            <param name="prop">The property</param>
            <returns>The Action to use to set the property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.IFastGetterSetter`1.GetValue(`0,System.Reflection.PropertyInfo)">
            <summary>Gets the value from instance for a given property</summary>
            <param name="instance">The instance of T</param>
            <param name="prop">The property value to get</param>
            <returns>The value of the property on instance</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.IFastGetterSetter`1.SetValue(`0,System.Reflection.PropertyInfo,System.Object)">
            <summary>Sets the value of a property for an instance of T</summary>
            <param name="instance">The instance of T</param>
            <param name="prop">The property to set</param>
            <param name="value">The new value</param>
        </member>
        <member name="P:SAJ.Core.Reflection.IFastGetterSetter`1.Properties">
            <summary>
            Gets the enumeration of properties
            </summary>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1"/> class.</summary>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.AddProp(System.Reflection.PropertyInfo)">
            <summary>The add prop.</summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.GetGetValueFunc(System.Reflection.PropertyInfo)">
            <summary>Gets the function to return value for a given property of type T</summary>
            <param name="prop">The property</param>
            <returns>The function to use to get the property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.GetSetValueFunc(System.Reflection.PropertyInfo)">
            <summary>Gets the function to set a value for a given property of type T</summary>
            <param name="prop">The property</param>
            <returns>The Action to use to set the property value</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.GetValue(`0,System.Reflection.PropertyInfo)">
            <summary>Gets a value from an instance.</summary>
            <param name="instance">The instance to get value from.</param>
            <param name="prop">The property.</param>
            <returns>The <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.SetValue(`0,System.Reflection.PropertyInfo,System.Object)">
            <summary>Sets a value for an instance.</summary>
            <param name="instance">The instance to set.</param>
            <param name="prop">The property to set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SAJ.Core.Reflection.FastGetterSetter.FastGetterSetterImpl`1.Properties">
            <summary>Gets the properties.</summary>
        </member>
        <member name="T:SAJ.Core.WorkerQueue`1">
            <summary>Worker Queue thread object to perform tasks in a separate thread based on <see cref="T:SAJ.Core.WorkerQueueWithState`2"/></summary>
            <typeparam name="T">Any type of object to act on</typeparam>
        </member>
        <member name="T:SAJ.Core.WorkerQueueWithState`2">
            <summary>Worker Queue thread object to perform tasks in a separate thread</summary>
            <typeparam name="T">Any type of object to act on</typeparam>
            <typeparam name="TState">Any state object to pass to the callback</typeparam>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.#ctor(System.Action{`1,`0},System.Func{`1},System.Action{`0,System.Exception},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.WorkerQueueWithState`2"/> class. Initializes a new instance of the <see cref="T:SAJ.Core.WorkerQueueWithState`2"/> class. Creates a new instance of a WorkerQueueWithState object</summary>
            <param name="callback">Method to call when a new item for work is available.  Method must be thread safe!  First param: thread state</param>
            <param name="createState">Method that creates the thread state - called once for each worker thread</param>
            <param name="onException">Method to call when an exception occurs.  May be NULL.</param>
            <param name="maxWorkerThreadCount">Number of worker threads to create, between 1 and <see cref="P:SAJ.Core.WorkerQueueWithState`2.MaxWorkerThreadsAllowed"/></param>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.QueueWork(`0)">
            <summary>Enqueues some work to do in a background worker thread</summary>
            <param name="work">The work to process</param>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.QueueWork(`0,System.TimeSpan)">
            <summary>Enqueues some work to do in a background worker thread, with a delay</summary>
            <param name="work">The work to process</param>
            <param name="delay">time to delay adding the item to the queue</param>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.QueueWork(`0,System.Int32)">
            <summary>Enqueues some work to do in a background worker thread, with a delay</summary>
            <param name="work">The work to process</param>
            <param name="millisecondsDelay">time to delay adding the item to the queue, in milliseconds</param>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.StartWorkerThread(System.TimeSpan)">
            <summary>
            Starts the background worker thread
            </summary>
            <param name="startupDelay">Time to wait before the worker threads start</param>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.StartWorkerThread">
            <summary>
            Starts the background worker thread
            </summary>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.StopWorkerThread">
            <summary>
            Stops the background worker thread
            </summary>
        </member>
        <member name="M:SAJ.Core.WorkerQueueWithState`2.WorkerThread(System.Object)">
            <summary>
            The worker thread that waits for work to do
            </summary>
            <param name="startupDelayO">The startup delay</param>
        </member>
        <member name="P:SAJ.Core.WorkerQueueWithState`2.MaxWorkerThreadsAllowed">
            <summary>
            Gets the maximum worker threads allowed (50)
            </summary>
        </member>
        <member name="P:SAJ.Core.WorkerQueueWithState`2.MaxWorkerThreadCount">
            <summary>Gets or sets the max worker thread count.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if value is &lt; 1 or &gt; 10</exception>
        </member>
        <member name="P:SAJ.Core.WorkerQueueWithState`2.QueuedWorkCount">
            <summary>
            Gets the number of items currently queued for work
            </summary>
        </member>
        <member name="P:SAJ.Core.WorkerQueueWithState`2.TimerDetail.Timer">
            <summary>Gets or sets the timer.</summary>
        </member>
        <member name="M:SAJ.Core.WorkerQueue`1.#ctor(System.Action{`0},System.Action{`0,System.Exception},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.WorkerQueue`1"/> class. Creates a new instance of a WorkerQueue object</summary>
            <param name="callback">Method to call when a new item for work is available.  Method must be thread safe!</param>
            <param name="onException">Method to call when an exception occurs.  May be NULL.</param>
            <param name="maxWorkerThreadCount">Number of worker threads to create, between 1 and <see cref="P:SAJ.Core.WorkerQueueWithState`2.MaxWorkerThreadsAllowed"/></param>
        </member>
        <member name="T:SAJ.Core.SimpleImport`1">
            <summary>
            A simple threaded import process
            </summary>
            <typeparam name="TKey">The type of key you're importing</typeparam>
        </member>
        <member name="M:SAJ.Core.SimpleImport`1.Go(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Starts the import process without the ability to cancel.
            </summary>
            <param name="keys">An enumeration of keys to import</param>
        </member>
        <member name="M:SAJ.Core.SimpleImport`1.Go(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationTokenSource)">
            <summary>
            Starts the import process.
            </summary>
            <param name="keys">An enumeration of keys to import</param>
            <param name="tokenSource">A CancellationTokenSource that allows cancelling the import process</param>
        </member>
        <member name="M:SAJ.Core.SimpleImport`1.Go">
            <summary>
            Starts the import process.
            </summary>
        </member>
        <member name="M:SAJ.Core.SimpleImport`1.ImportData(System.Collections.Generic.List{`0})">
            <summary>
            Performs the import.  Takes a list of keys and imports them
            </summary>
            <param name="keys">The keys to import</param>
            <returns>True to continue the import, False otherwise</returns>
        </member>
        <member name="P:SAJ.Core.SimpleImport`1.ShouldStop">
            <summary>
            Returns true if the import should stop
            </summary>
        </member>
        <member name="P:SAJ.Core.SimpleImport`1.CancelToken">
            <summary>
            Gets the CancellationToken for the process
            </summary>
        </member>
        <member name="T:SAJ.Core.Splunk">
            <summary>
            Simple class that wraps calls to splunk
            </summary>
        </member>
        <member name="M:SAJ.Core.Splunk.Send(System.String)">
            <summary>sends the pre-formated UDP message for splunk in a worker thread</summary>
            <param name="message">The UDP message to send</param>
        </member>
        <member name="M:SAJ.Core.Splunk.Send(System.String[])">
            <summary>sends the pre-formated UDP message for splunk in a worker thread</summary>
            <param name="messages">The UDP messages to send</param>
        </member>
        <member name="M:SAJ.Core.Splunk.Send(System.Collections.Generic.IEnumerable{System.String})">
            <summary>sends the pre-formated UDP message for splunk in a worker thread</summary>
            <param name="messages">The UDP messages to send</param>
        </member>
        <member name="M:SAJ.Core.Splunk.SendInThread(System.String[])">
            <summary>The worker thread method that sends the splunk message</summary>
            <param name="messages">the messages</param>
        </member>
        <member name="P:SAJ.Core.Splunk.Host">
            <summary>
            Gets or sets the Host used by splunk
            </summary>
        </member>
        <member name="P:SAJ.Core.Splunk.IsEnabled">
            <summary>Gets or sets a value indicating whether Splunk Is Enabled.</summary>
        </member>
        <member name="P:SAJ.Core.Splunk.Port">
            <summary>
            Gets or sets the Port used by splunk
            </summary>
        </member>
        <member name="T:SAJ.Core.DataImportProcessor`2">
            <summary>
            Provides generic import capability
            <typeparam name="TFrom">The type of object to import from</typeparam>
            <typeparam name="TTo">The type of object to import to</typeparam>
            </summary>
        </member>
        <member name="M:SAJ.Core.DataImportProcessor`2.ImportSingle(SAJ.Core.IDataImportHandler{`0,`1},`0)">
            <summary>
            Imports a single datum to the system.
            </summary>
            <param name="importer">A import handler</param>
            <param name="data">The data to import</param>
        </member>
        <member name="M:SAJ.Core.DataImportProcessor`2.ImportMultiple(SAJ.Core.IDataImportHandler{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
            <summary>
            Imports an eumeration of data into the system.
            </summary>
            <param name="importer">A import handler</param>
            <param name="data">The data to import</param>
            <param name="batchSize">The size of the batch (optional)</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SAJ.Core.DataImportProcessor`2.ImportFromDataSource(SAJ.Core.IDataImportHandler{`0,`1},System.Func{SAJ.Core.IDataImportReader{`0}})" -->
        <member name="M:SAJ.Core.DataImportProcessor`2.ThreadReadProc(System.Object)">
            <summary>
            the reading thread
            </summary>
            <param name="ostate">The ThreadState</param>
        </member>
        <member name="F:SAJ.Core.DataImportTypeEnum.NewestOnly">
            <summary>
            imports only the new entries
            </summary>
        </member>
        <member name="F:SAJ.Core.DataImportTypeEnum.Everything">
            <summary>
            purges all data for that environment
            </summary>
        </member>
        <member name="F:SAJ.Core.DataImportTypeEnum.Overwrite">
            <summary>
            overwrites all existing records
            </summary>
        </member>
        <member name="T:SAJ.Core.IScheduledTask">
            <summary>
            Interface used for periodic scheduled tasks
            </summary>
        </member>
        <member name="M:SAJ.Core.IScheduledTask.GetNextScheduledTime">
            <summary>
            Returns the next time (in UTC) the task should fire.  If the time already happened, the timer will fire immediately.
            </summary>
            <returns>null if the timer shouldn't fire, or the time the timer should fire.</returns>
        </member>
        <member name="M:SAJ.Core.IScheduledTask.ScheduledTimerFired(System.Threading.WaitHandle)">
            <summary>
            Called when the scheduled time has occurred
            </summary>
            <param name="stopEvent">An event to wait on that when set, the method should exit as soon as possible.</param>
        </member>
        <member name="M:SAJ.Core.Logger.GetLogger">
            <summary>
            Returns the default log4net logger for the process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SAJ.Core.Exceptions.BusinessRuleException">
            <summary>
            Use to indicate violation of Business Rules. 
            </summary>
            <author>Todd King</author>
        </member>
        <member name="F:SAJ.Core.Exceptions.BusinessRuleException.Header">
            <summary>
            Message header for all messages.
            </summary>
        </member>
        <member name="M:SAJ.Core.Exceptions.BusinessRuleException.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:SAJ.Core.Exceptions.BusinessRuleException"/> class.
            </summary>
        </member>
        <member name="M:SAJ.Core.Exceptions.BusinessRuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:SAJ.Core.Exceptions.BusinessRuleException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:SAJ.Core.Exceptions.ObjectNotFoundException">
            <summary>
            TODO: Add some useful info about ObjectNotFoundException
            </summary>
            <author>Todd King</author>
        </member>
        <member name="T:SAJ.Core.Exceptions.ObjectPermissionDeniedException">
            <summary>
            TODO: Add some useful info about ObjectNotFoundException
            </summary>
            <author>Todd King</author>
        </member>
        <member name="M:SAJ.Core.Exceptions.ObjectPermissionDeniedException.#ctor(System.String)">
            <summary>
            Constructor requiring the object name and the object id.  Ex:  CorporateAccount.134567
            </summary>
            <param name="objectNameAndId"></param>
        </member>
        <member name="T:SAJ.Core.Exceptions.PredictableException">
            <summary>
            A "marker" exception that indicates a predictable error occurred.  The
            idea being that an exception of this type can control logic flow in
            circumstances where a more "pure" approach to error handling and
            reporting is problematic.
            </summary>
            <remarks>
            The initial purpose of this exception type is to allow the use of our
            automatic transaction management mechanism in cases where a "cleaner"
            error reporting/propagation mechanism is more appropriate, but would
            require manual transaction management to accomodate the "cleaner" impl.
            </remarks>
        </member>
        <member name="T:SAJ.Core.ExtensionMethods.Conversion">
            <summary>
            Class for all conversion extension methods
            </summary>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.To``1(System.IConvertible)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrDefault``1(System.IConvertible)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrDefault``1(System.IConvertible,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrOther``1(System.IConvertible,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrOther``1(System.IConvertible,``0@,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="newObj"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrNull``1(System.IConvertible)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.Conversion.ToOrNull``1(System.IConvertible,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="T:SAJ.Core.ExtensionMethods.ObjectExtensionMethods">
            <summary>
            Extension method for object types
            </summary>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.IsNull(System.Object)">
            <summary>
            Checks whether an object value is null
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the PropertyInfo instance returned by an exptression
            </summary>
            <param name="me">An object</param>
            <param name="getProperty">An expression that returns a property</param>
            <returns>The PropertyInfo, or NULL</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.GetDescription``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the Description attribute value for an object
            </summary>
            <param name="me">An object</param>
            <param name="getProperty">An expression that returns a member</param>
            <returns>The Description value, or NULL</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Gets the Description attribute value for a given MemberInfo
            </summary>
            <param name="me">The MemberInfo object</param>
            <returns>The Description value, or NULL</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets an enumeration of attributes for a given MemberInfo type
            </summary>
            <typeparam name="T">The type of the CustomAttribute to return</typeparam>
            <param name="me">The MemberInfo</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.ObjectExtensionMethods.GetObjectPropsWithCustomAttribute``1(System.Type)">
            <summary>
            Returns a list of object properties with a given custom attribute
            </summary>
            <typeparam name="T">The CustomAttribute to return</typeparam>
            <param name="me">The Type of the object</param>
            <returns>An enumeration of Tuple&lt;PropertyInfo, T&gt;</returns>
        </member>
        <member name="T:System.Linq.EnumerableExtensionMethods">
            <summary>Class for all IEnumerable&lt;T&gt; extension methods</summary>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>(SAJ.Core) Determines if an enumeration is null or has zero items</summary>
            <typeparam name="T">The enumerable type</typeparam>
            <param name="source">The enumeration</param>
            <returns>A boolean indicating if the enumeration is null or empty</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.ToListOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>(SAJ.Core) Creates a List&lt;T&gt; from an IEnumerable&lt;T&gt;.  If the source is null, returns an empty List&lt;T&gt;.</summary>
            <param name="source">The IEnumerable&lt;T&gt; to create a List&lt;T&gt; from.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>A List&lt;T&gt; that contains elements from the input sequence or an empty List&lt;T&gt; if source is null.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.ToListOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})">
            <summary>(SAJ.Core) Creates a List&lt;T&gt; from an IEnumerable&lt;T&gt;.  
            If the source is null, returns the value&lt;T&gt;he default parameter.  
            If the default parameter is null, returns an empty List&lt;T&gt;.</summary>
            <param name="source">The IEnumerable&lt;T&gt; to create a List&lt;T&gt; from.</param>
            <param name="default">The default value to use when source is null.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>A List&lt;T&gt; that contains elements from the input sequence.  
            Returns the value&lt;T&gt;he default parameter if source is null.
            Returns an empty List&lt;T&gt; if source is null and default is null.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.ToArrayOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>(SAJ.Core) Creates an Array&lt;T&gt; from an IEnumerable&lt;T&gt;.  If the source is null, returns an empty Array&lt;T&gt;.</summary>
            <param name="source">The IEnumerable&lt;T&gt; to create a Array&lt;T&gt; from.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An Array&lt;T&gt; that contains elements from the input sequence or an empty Array&lt;T&gt; if source is null.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.ToArrayOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>(SAJ.Core) Creates an Array&lt;T&gt; from an IEnumerable&lt;T&gt;.  
            If the source is null, returns the value&lt;T&gt;he default parameter.  
            If the default parameter is null, returns an empty Array&lt;T&gt;.</summary>
            <param name="source">The IEnumerable&lt;T&gt; to create an Array&lt;T&gt; from.</param>
            <param name="default">The default value to use when source is null.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An Array&lt;T&gt; that contains elements from the input sequence.  
            Returns the value&lt;T&gt;he default parameter if source is null.
            Returns an empty Array&lt;T&gt; if source is null and default is null.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>(SAJ.Core) Performs the specified action on each element&lt;T&gt;he IEnumerable&lt;T&gt;.</summary>
            <param name="source">The IEnumerable&lt;T&gt; to perform actions on.</param>
            <param name="action">The Action&lt;T&gt; delegate to perform on each element&lt;T&gt;he IEnumerable&lt;T&gt;.</param>
            <typeparam name="T">The type&lt;T&gt;he elements of source.</typeparam>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.Paginate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>(SAJ.Core) Returns enumerable lists broken into the given page size</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The IEnumerable&lt;T&gt; to paginate.</param>
            <param name="pageSize">The size of the pages</param>
            <returns>The set of pages</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.GetPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>(SAJ.Core) Returns an enumerable list that represents the page of the list that was passed in based off of the page index and page size</summary>
            <param name="source">The IEnumerable&lt;T&gt; to get the page for.</param>
            <param name="pageIndex">The index if the page to get</param>
            <param name="pageSize">The size of the pages</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>The page (or null)</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.GetPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>(SAJ.Core) Returns an enumerable list that represents the page of the list that was passed in based off of the page index and page size</summary>
            <param name="source">The IEnumerable&lt;T&gt; to get the page for.</param>
            <param name="pageIndex">The index if the page to get</param>
            <param name="pageSize">The size of the pages</param>
            <param name="pageCount">Out parameter that tells the page count</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>The page (or null)</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>(SAJ.Core) Breaks the enumerable list into chunks</summary>
            <param name="source">The IEnumerable&lt;T&gt; to chunk.</param>
            <param name="chunks">The number of chunks</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>The chunks</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>(SAJ.Core) Returns a random item (or null) from the enumeration</summary>
            <param name="source">The IEnumerable&lt;T&gt; to get a random item from.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>a random item (or null)</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.Random``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>(SAJ.Core) Returns a random amount of the items passed in</summary>
            <param name="source">The IEnumerable&lt;T&gt; to get a random subset from.</param>
            <param name="subSetCount">The sub set count.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>The random subset (or null)</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.GetRandomSubSet``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>(SAJ.Core) Returns a random amount of the items passed in</summary>
            <param name="source">The IEnumerable&lt;T&gt; to get a random subset from.</param>
            <param name="subSetCount">The sub set count.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>The random subset (or null)</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensionMethods.Append``1(System.Collections.Generic.List{``0},``0,System.Boolean)">
            <summary>
            If the item is non-default, adds the item to a list.  Then, return the list
            </summary>
            <param name="list">the list of items</param>
            <param name="item">The new item to add</param>
            <param name="addDefault">Set this flag to true to allow adding default values to the list (eg: null/0)</param>
            <returns>The original list</returns>
        </member>
        <member name="T:SAJ.Core.IDataImportHandler`2">
            <summary>
            Interface used by the DataImportProcessor
            </summary>
            <typeparam name="TFrom">any type of enumerable object</typeparam>
            <typeparam name="TTo">The type of object you are converting to (may be an IEnumerable/List or a MemoryStream)</typeparam>
        </member>
        <member name="M:SAJ.Core.IDataImportHandler`2.PreProcess">
            <summary>
            Pre-process any import options
            </summary>
        </member>
        <member name="M:SAJ.Core.IDataImportHandler`2.PostProcess">
            <summary>
            Post-process any import options
            </summary>
        </member>
        <member name="M:SAJ.Core.IDataImportHandler`2.PreProcessData(`0)">
            <summary>
            PreProcesses the data before sending it to the ConvertImportData method
            </summary>
            <param name="data">The data to process</param>
        </member>
        <member name="M:SAJ.Core.IDataImportHandler`2.ImportData(`1)">
            <summary>
            Imports the data
            </summary>
            <param name="data">The data to import</param>
        </member>
        <member name="M:SAJ.Core.IDataImportHandler`2.ConvertImportData(System.Collections.Generic.List{`0})">
            <summary>
            Writes the import data into a memory stream to be sent using SendRequest.  Must be re-entrant and thread-safe
            </summary>
            <param name="fromList">A list of objects to convert to the TTo</param>
        </member>
        <member name="P:SAJ.Core.IDataImportHandler`2.Options">
            <summary>
            Gets or sets the data import options
            </summary>
        </member>
        <member name="T:SAJ.Core.IDataImportOptions`1">
            <summary>
            Options used by the DataImportProcessor
            </summary>
            <typeparam name="TFrom"></typeparam>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.StopEvent">
            <summary>
            Returns a handle that, when signalled, will stop the import
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.NumReaderThreads">
            <summary>
            Gets or sets the number of reader threads to use
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.NumWriterThreads">
            <summary>
            Gets or sets the number of writer threads to use
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.ImportRetry">
            <summary>
            Gets or sets the number of retries when an import fails
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.BatchSize">
            <summary>
            Gets or sets the batch size to send for each import
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.ImportType">
            <summary>
            Gets or sets the type of import to perform
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.ImportLimit">
            <summary>
            Gets or sets the total number of records to import
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.ImportedCount">
            <summary>
            Gets or sets the total number of imports performed
            </summary>
        </member>
        <member name="P:SAJ.Core.IDataImportOptions`1.ShouldImportData">
            <summary>
            Gets or sets a delegate that returns True of the data should be imported (may be NULL to import all data)
            </summary>
        </member>
        <member name="T:SAJ.Core.IDataImportReader`1">
            <summary>
            Used by the DataImportProcessor
            </summary>
            <typeparam name="TFrom"></typeparam>
        </member>
        <member name="M:SAJ.Core.IDataImportReader`1.GetData(System.Int32)">
            <summary>
            Returns a list of data to import.
            </summary>
            <param name="numitems">The number of items to import</param>
            <returns>A list of items.  Return an empty list to finish the import</returns>
        </member>
        <member name="P:SAJ.Core.IDataImportReader`1.StopEvent">
            <summary>
            Gets or sets a waitable handle that, when signalled, indicates the data reader should stop processing
            </summary>
        </member>
        <member name="T:SAJ.Core.Impersonation.ImpersonateMethod">
            <summary>
            Summary description for ImpersonateMethod.
            </summary>
        </member>
        <member name="M:SAJ.Core.Impersonation.ImpersonateMethod.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the class and provides the network credentials required for impersonation
            </summary>
            <param name="username">UserName of a valid user on the network</param>
            <param name="domain">Valid Domain Name</param>
            <param name="password">Password of the Username</param>
        </member>
        <member name="M:SAJ.Core.Impersonation.ImpersonateMethod.ValidateUserCredentials">
            <summary>
            Validates the public properties containing the network credentials. If any are missing then
            a MissingMemberException is thrown
            </summary>
        </member>
        <member name="M:SAJ.Core.Impersonation.ImpersonateMethod.Impersonate(SAJ.Core.Impersonation.ImpersonateMethod.ImpersonateMethodDelegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="impersonateMethod">Delegate</param>
            <param name="parms">Parameters required by the method specified by the delegate</param>
            <returns>object returned by the method invoked</returns>
        </member>
        <member name="T:SAJ.Core.LoggingExtensions">
            <summary>
            A collection of extension methods for help in logging extra data to XML.
            </summary>
        </member>
        <member name="F:SAJ.Core.LoggingExtensions.ObjectType">
            <summary>
            Used in determining if an object is an anonymous object
            </summary>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.IsLogLevelEnabled(Common.Logging.ILog,SAJ.Core.EnumLogLevel)">
            <summary>
            Returns a value indicating wheter the log is enabled for the given level
            </summary>
            <param name="log">The log interface</param>
            <param name="logLevel">The log level</param>
            <returns>True if the logging is enabled for that level</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.LogFormat(Common.Logging.ILog,SAJ.Core.EnumLogLevel,System.String,System.Exception,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Logs a message to the logging subsystem using standard XML log formatting.
            </summary>
            <param name="log">The ILog instance</param>
            <param name="logLevel">The level to log</param>
            <param name="message">The message to log</param>
            <param name="ex">The optional exception</param>
            <param name="x">The optional action that appends nodes to an XElement</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.ToLogXml``1(``0,System.Xml.Linq.XElement,System.String,System.String,SAJ.Core.LogReflectionSettings)">
            <summary>
            Outputs all of the public properties of this object for use in exporting to a log file.
            </summary>
            <typeparam name="T">The type of the object to output ... can be used to restrict the fields output</typeparam>
            <param name="instance">The instance to log.</param>
            <param name="element">The XElement to append the instance values to</param>
            <param name="variableName">The name of the variable being logged.</param>
            <param name="description">The description of the object being logged</param>
            <param name="reflectionSettings">The settings to use while reflecting through the instance.</param>
            <returns>The XML representation as string.</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.ToLogXml``1(``0,System.String,System.String,SAJ.Core.LogReflectionSettings)">
            <summary>
            Outputs all of the public properties of this object for use in exporting to a log file.
            </summary>
            <typeparam name="T">The type of the object to output ... can be used to restrict the fields output</typeparam>
            <param name="instance">The instance to log.</param>
            <param name="variableName">The name of the variable being logged.</param>
            <param name="description">The description of the object being logged</param>
            <param name="reflectionSettings">The settings to use while reflecting through the instance.</param>
            <returns>The XML representation as string.</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddObject(System.Xml.Linq.XElement,System.Object,System.String,SAJ.Core.LogReflectionSettings,System.Int32,System.Type)">
            <summary>
            Adds the given instance to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> we are writing to.</param>
            <param name="instance">The instance to write to the writer</param>
            <param name="variableName">The name of the variable being written.</param>
            <param name="reflectionSettings">The settings to use in reflecting</param>
            <param name="currentDepth">The current level we are at in recursing through an object (used to make sure we do not go to deep, or into an infinite loop)</param>
            <param name="instanceType">The type of instance</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddObjectValueAsAttribute(System.Xml.Linq.XElement,System.Object,System.Type,SAJ.Core.LogReflectionSettings)">
            <summary>
            Adds the instance's value as an attribute.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> we are extending (writing to)</param>
            <param name="instance">The instance we want to output the string value of.</param>
            <param name="instanceType">The instance's type.</param>
            <param name="reflectionSettings">The settings to use in outputting data</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddCollection(System.Xml.Linq.XElement,System.Object,SAJ.Core.LogReflectionSettings,System.Int32)">
            <summary>
            Outputs the collection to the given <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> we are extending (writing to)</param>
            <param name="instance">The instance we want to output as a collection.</param>
            <param name="reflectionSettings">The settings to use while reflecting the object.</param>
            <param name="currentDepth">The current depth we have traversed in the original object's property hierarchy</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddProperties(System.Xml.Linq.XElement,System.Object,System.Type,SAJ.Core.LogReflectionSettings,System.Int32)">
            <summary>
            Outputs each of the given instance's properties to the <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> we are extending (writing to)</param>
            <param name="instance">The instance to output the properties of. This outputs ALL readable instance properties</param>
            <param name="instanceType">The instance's type to output. This allows us to limit the properties output by providing an interface instead of using the actual instance Type.</param>
            <param name="reflectionSettings">The settings to use while reflecting</param>
            <param name="currentDepth">The current depth we have traversed in the original object's property hierarchy</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddObject(System.Xml.XmlWriter,System.Object,System.String,SAJ.Core.LogReflectionSettings,System.Int32,System.Type)">
            <summary>
            Adds the given instance to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> we are extending/writing to.</param>
            <param name="instance">The instance to write to the writer</param>
            <param name="variableName">The name of the variable being written.</param>
            <param name="reflectionSettings">The settings to use in reflecting</param>
            <param name="currentDepth">The current level we are at in recursing through an object (used to make sure we do not go to deep, or into an infinite loop)</param>
            <param name="instanceType">The type of instance</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddObjectValueAsAttribute(System.Xml.XmlWriter,System.Object,System.Type,SAJ.Core.LogReflectionSettings)">
            <summary>
            Adds the instance's value as an attribute.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> we are extending (writing to)</param>
            <param name="instance">The instance we want to output the string value of.</param>
            <param name="instanceType">The instance's type.</param>
            <param name="reflectionSettings">The settings to use in outputting data</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddCollection(System.Xml.XmlWriter,System.Object,SAJ.Core.LogReflectionSettings,System.Int32)">
            <summary>
            Outputs the collection to the given <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> we are extending (writing to)</param>
            <param name="instance">The instance we want to output as a collection.</param>
            <param name="reflectionSettings">The settings to use while reflecting the object.</param>
            <param name="currentDepth">The current depth we have traversed in the original object's property hierarchy</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.AddProperties(System.Xml.XmlWriter,System.Object,System.Type,SAJ.Core.LogReflectionSettings,System.Int32)">
            <summary>
            Outputs each of the given instance's properties to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> we are extending (writing to)</param>
            <param name="instance">The instance to output the properties of. This outputs ALL readable instance properties</param>
            <param name="instanceType">The instance's type to output. This allows us to limit the properties output by providing an interface instead of using the actual instance Type.</param>
            <param name="reflectionSettings">The settings to use while reflecting</param>
            <param name="currentDepth">The current depth we have traversed in the original object's property hierarchy</param>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type
            </summary>
            <param name="type">The type to get the name of.</param>
            <returns>The name of the type or UNKNOWN if NULL.</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.IsAnonymous(System.Type)">
            <summary>
            Determines if the Type is for an anonymous type.
            </summary>
            <param name="type">The type to compare</param>
            <returns>Whether the type is an anonymous object.</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.IsCollection(System.Type)">
            <summary>
            Determines if a type is a collection.
            </summary>
            <param name="type">The type to determine if its a collection.</param>
            <returns>A value that represents whether the type is a collection.</returns>
        </member>
        <member name="M:SAJ.Core.LoggingExtensions.IsFilteredPropertyType(System.Type)">
            <summary>
            Checks to see if the given <see cref="T:System.Type"/> is one of the Types we do not want to output any of the properties for (where the properties do not add any value).
            </summary>
            <param name="type">The type to check against</param>
            <returns>If the type should be filtered out</returns>
        </member>
        <member name="T:SAJ.Core.LogMessageFormatter">
            <summary>
            Used for formatting log messages
            </summary>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.GetXmlFormatted``1(SAJ.Core.EnumLogLevel,System.String,``0,System.String,System.String,System.Exception,SAJ.Core.LogReflectionSettings,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Returns the log message as formatted XML
            </summary>
            <typeparam name="T">The instance's Type ... which allows you to specify a specific interface to limit the details being output.</typeparam>
            <param name="logLevel">The log level.</param>
            <param name="message">The message to be logged.</param>
            <param name="instance">The instance to output the state of</param>
            <param name="instanceVariableName">The instance's variable name</param>
            <param name="instanceDescription">The description of the instance being output</param>
            <param name="exc">The exception</param>
            <param name="instanceLogSettings">The settings to use in logging the state of the instance.</param>
            <param name="additionalWrites">Allows additional custom writes to the XDocument instance.</param>
            <returns>A string representing information about the exception and the status of the given instance.</returns>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.GetXmlFormatted(SAJ.Core.EnumLogLevel,System.String,System.Exception,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Returns the log message as formatted XML
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="message">The message to be logged.</param>
            <param name="exc">The exception.</param>
            <param name="additionalData">Allows additional custom writes to the XDocument instance</param>
            <returns>string</returns>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.WriteFormattedXml(SAJ.Core.EnumLogLevel,System.String,System.Exception,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Used to write the root/top level exception information as XML.
            All inner exceptions are then converted to XML and written out.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="message">The message to log.</param>
            <param name="exc">The exception.</param>
            <param name="additionalData">Allows additional custom writes to the XDocument instance</param>
            <returns>string</returns>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.WriteCommonExceptionXmlElements(System.Exception,System.Xml.Linq.XElement)">
            <summary>
            Used by various methods that need to convert the same
            exception properties and values to XML elements.
            </summary>
            <param name="exc">The exc.</param>
            <param name="exceptionXml">The exception XML.</param>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.InnerExceptionXmlWriter(System.Exception,System.Xml.Linq.XElement)">
            <summary>
            Used to write all inner exceptions contained within 
            the root exception.  Recursively calls itself as long
            as each inner exception has its own inner exception.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="exceptionXml">The exception XML.</param>
        </member>
        <member name="M:SAJ.Core.LogMessageFormatter.WriteCommonSqlExceptionXmlElements(System.Data.SqlClient.SqlException,System.Xml.Linq.XElement)">
            <summary>
            Used by various methods that need to convert the same
            SQL exception properties and values to XML elements.
            </summary>
            <param name="sqlExc">The SQL exc.</param>
            <param name="exceptionXml">The exception XML.</param>
        </member>
        <member name="T:SAJ.Core.EnumLogLevel">
            <summary>
            Enumeration to designate logging level for logging xml
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Info">
            <summary>
            Info Log
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Trace">
            <summary>
            Trace Log
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Warn">
            <summary>
            Warning Log
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Debug">
            <summary>
            Debug Log
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Error">
            <summary>
            Error Log
            </summary>
        </member>
        <member name="F:SAJ.Core.EnumLogLevel.Fatal">
            <summary>
            Fatal Log
            </summary>
        </member>
        <member name="T:SAJ.Core.LogReflectionSettings">
            <summary>
            Provides settings for reflecting through an object for log output. For now these are just limiters to ensure we do not go overboard outputting incredible amounts of data.
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.PropertyDepthMax">
            <summary>
            The maximum depth to allow recursing through an object's properties before stopping (to prevent infinite loops or just outputting obscene amounts of data)
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.PropertyDepthDefault">
            <summary>
            The default depth to recurse through the properties of an object
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.PropertyDepthMin">
            <summary>
            We need to output at least one level, otherwise this is kind of silly to even be using
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.CollectionOutputMin">
            <summary>
            The minimum number of collection items to output (number of items in a collection to output before stopping)
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.CollectionOutputDefault">
            <summary>
            The default number of collection items to output
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.CollectionOutputMax">
            <summary>
            The maximum number of collection items to output, regardless what the user tries to specify
            </summary>
        </member>
        <member name="F:SAJ.Core.LogReflectionSettings.DefaultShowAnonymousValue">
            <summary>
            The default on whether or not to show an anonymous object's value (ToString())
            </summary>
        </member>
        <member name="M:SAJ.Core.LogReflectionSettings.#ctor(System.Int32,System.Int32,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.LogReflectionSettings"/> class.
            </summary>
            <param name="propertyDepth">The maximum depth to recurse through the object's properties.</param>
            <param name="collectionCount">The maximum number of items in a collection to output.</param>
            <param name="propertyBindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> to use to select which properties to output the values of</param>
            <param name="showAnonymousValue">Whether or not to output the value of an anonymous object, essentially the ToString() which outputs the object as JSON</param>
        </member>
        <member name="M:SAJ.Core.LogReflectionSettings.GetDefault">
            <summary>
            Gets a default value to use for settings (for when this is not provided)
            </summary>
            <returns>An instance of <see cref="T:SAJ.Core.LogReflectionSettings"/></returns>
        </member>
        <member name="M:SAJ.Core.LogReflectionSettings.GetValueInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures a value is in range, if not, it returns the range min/max closest to the value.
            </summary>
            <param name="requestedValue">The requested value</param>
            <param name="minValue">The lowest allowable value.</param>
            <param name="maxValue">The highest allowable value.</param>
            <returns>A value closest to the requestedValue as allowable.</returns>
        </member>
        <member name="P:SAJ.Core.LogReflectionSettings.PropertyDepthMaximum">
            <summary>
            Gets the maximum depth to recurse through an object and output its properties.
            </summary>
        </member>
        <member name="P:SAJ.Core.LogReflectionSettings.CollectionOutputCountMaximum">
            <summary>
            Gets the maximum number of items in a collection to output (to prevent clogging the log with too much data)
            </summary>
        </member>
        <member name="P:SAJ.Core.LogReflectionSettings.PropertyBindingFlags">
            <summary>
            Gets the <see cref="T:System.Reflection.BindingFlags"/> to use to select which properties to output.
            </summary>
        </member>
        <member name="P:SAJ.Core.LogReflectionSettings.ShowAnonymousValue">
            <summary>
            Gets a value indicating whether or not to output the value on an anonymous object (the ToString()) which is essentially a JSON format of the entire anonymous object.
            </summary>
        </member>
        <member name="T:SAJ.Core.RetryExtensions">
            <summary>
            Static class that provides a simple way to retry actions that may need a few tries to work
            </summary>
        </member>
        <member name="M:SAJ.Core.RetryExtensions.Retry``1(System.Func{``0},System.Func{System.Int32,System.Exception,System.Boolean},System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Retries an action when an exception is thrown up to "tries" time and waits sleeptimerms between each try
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="action">The action to try</param>
            <param name="shouldretry">parameter is the try number, return true to keep trying, return false to throw the exception</param>
            <param name="tries">The number of tries</param>
            <param name="sleeptimer">The time to sleep between each try</param>
            <returns>the result of the action</returns>
        </member>
        <member name="M:SAJ.Core.RetryExtensions.Retry``1(System.Func{``0},System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Retries an action when an exception is thrown up to "tries" time and waits sleeptimerms between each try
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="action">The action to try</param>
            <param name="tries">The number of tries</param>
            <param name="sleeptimer">The time to sleep between each try</param>
            <returns>the result of the action</returns>
        </member>
        <member name="M:SAJ.Core.RetryExtensions.Retry(System.Action,System.Func{System.Int32,System.Exception,System.Boolean},System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Retries an action when an exception is thrown up to "tries" time and waits sleeptimerms between each try
            </summary>
            <param name="action">The action to try</param>
            <param name="shouldretry">parameter is the try number, return true to keep trying, return false to throw the exception</param>
            <param name="tries">The number of tries</param>
            <param name="sleeptimer">The time to sleep between each try</param>
            <returns>the result of the action</returns>
        </member>
        <member name="M:SAJ.Core.RetryExtensions.Retry(System.Action,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Retries an action when an exception is thrown up to "tries" time and waits sleeptimerms between each try
            </summary>
            <param name="action">The action to try</param>
            <param name="tries">The number of tries</param>
            <param name="sleeptimer">The time to sleep between each try</param>
            <returns>the result of the action</returns>
        </member>
        <member name="T:SAJ.Core.SajCallContext">
            <summary>
            Access to state related to the call context.
            </summary>
        </member>
        <member name="M:SAJ.Core.SajCallContext.RequestTransactionRollback">
            <summary>
            Request that the transaction (if any) that is open in this call context 
            be rolled-back.
            </summary>
        </member>
        <member name="P:SAJ.Core.SajCallContext.IsRollbackRequested">
            <summary>
            Gets a value indicating whether is rollback requested.
            </summary>
            <value>
            	<c>true</c> if is rollback requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SAJ.Core.ScheduledTaskManager">
            <summary>
            Manages a list of scheduled tasks
            </summary>
        </member>
        <member name="M:SAJ.Core.ScheduledTaskManager.AddTask(SAJ.Core.IScheduledTask)">
            <summary>
            Adds a scheduled task to the list of timers.  If the task returns null for the next scheduled time, the task is not added.
            </summary>
            <param name="task">The task to add.</param>
        </member>
        <member name="M:SAJ.Core.ScheduledTaskManager.StopTask(SAJ.Core.IScheduledTask)">
            <summary>
            Stops an individual task
            </summary>
            <param name="task">The task to stop.  If the task doesn't exist, an ArgumentOutOfRangeException occurs.</param>
        </member>
        <member name="M:SAJ.Core.ScheduledTaskManager.StopTasks">
            <summary>
            Stops running all tasks
            </summary>
        </member>
        <member name="P:SAJ.Core.ScheduledTaskManager.Tasks">
            <summary>
            Gets a list of the current tasks in the scheduled task manager
            </summary>
        </member>
        <member name="T:SAJ.Core.StatsD">
            <summary>
            Simple class that wraps counters and timers for statsd. 
            Statsd counter names should be lowercase and separated by periods.  Example: library.method.task
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.Count(System.String,System.Int32,System.Nullable{System.Double})">
            <summary>Increment or decrement a StatsD counter</summary>
            <param name="counterName">A counter name</param>
            <param name="count">the counter value</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
        </member>
        <member name="M:SAJ.Core.StatsD.Count(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Double})">
            <summary>Increment or decrement a StatsD counter</summary>
            <param name="counterNames">A set of counter names</param>
            <param name="count">the counter value</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
        </member>
        <member name="M:SAJ.Core.StatsD.Decrement(System.String)">
            <summary>Decrement a StatsD counter by 1</summary>
            <param name="counterName">A counter name</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.String,System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Decrement(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Decrement a StatsD counter by 1</summary>
            <param name="counterNames">A set of counter names</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Decrement(System.String,System.Double)">
            <summary>Decrement a StatsD counter with a sample rate</summary>
            <param name="counterName">A counter name</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.String,System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Decrement(System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>Decrement a StatsD counter with a sample rate</summary>
            <param name="counterNames">A set of counter names</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Increment(System.String)">
            <summary>Increment a StatsD counter by 1</summary>
            <param name="counterName">A counter name</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.String,System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Increment(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Increment a StatsD counter by 1</summary>
            <param name="counterNames">A set of counter names</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Increment(System.String,System.Double)">
            <summary>Increment a StatsD counter with a sample rate</summary>
            <param name="counterName">A counter name</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.String,System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.Increment(System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>Increment a StatsD counter with a sample rate</summary>
            <param name="counterNames">A set of counter names</param>
            <param name="sampleRate">A value less than or equal to 1 indicating the rate at which a counter should be sent</param>
            <seealso cref="M:SAJ.Core.StatsD.Count(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Double})"/>
        </member>
        <member name="M:SAJ.Core.StatsD.StartTimer(System.String)">
            <summary>Returns an IStatsDTimer instance to track how long something took.</summary>
            <param name="counterName">A counter name</param>
            <returns>An IStatsDTimer instance</returns>
        </member>
        <member name="M:SAJ.Core.StatsD.StartTimerForMethod(System.String)">
            <summary>Returns an IStatsDTimer instance to track how long something took based on the rootCounterName, then the calling method's namespace, class and method name.</summary>
            <param name="rootCounterName">A counter name</param>
            <returns>An IStatsDTimer instance</returns>
        </member>
        <member name="M:SAJ.Core.StatsD.Timing(System.String,System.Int32)">
            <summary>Increment a StatsD counter with a time to execute</summary>
            <param name="counterName">The counter name</param>
            <param name="timeInMilliseconds">The time</param>
        </member>
        <member name="M:SAJ.Core.StatsD.Timing(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>Increment a StatsD counter with a time to execute</summary>
            <param name="counterNames">A set of counter names</param>
            <param name="timeInMilliseconds">The time</param>
        </member>
        <member name="M:SAJ.Core.StatsD.Send(System.String[])">
            <summary>sends the pre-formated UDP messages for statsd in a worker thread</summary>
            <param name="messages">The UDP messages to send</param>
        </member>
        <member name="M:SAJ.Core.StatsD.SendInThread(System.String[])">
            <summary>The worker thread method that sends the statsd message</summary>
            <param name="messages">Messages to send</param>
        </member>
        <member name="P:SAJ.Core.StatsD.Host">
            <summary>
            Gets or sets the Host used by statsd (default: uses statsdhost appSettings value)
            </summary>
        </member>
        <member name="P:SAJ.Core.StatsD.IsEnabled">
            <summary>Gets or sets a value indicating whether statsd Is Enabled.</summary>
        </member>
        <member name="P:SAJ.Core.StatsD.Port">
            <summary>
            Gets or sets the Port used by statsd (default: uses statsdport appSettings value)
            </summary>
        </member>
        <member name="T:SAJ.Core.StatsD.IStatsDTimer">
            <summary>
            Interface for a StatsDTimer implementation
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.IStatsDTimer.Abort">
            <summary>
            Aborts the timer.  You can re-start a timer by calling Start();
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.IStatsDTimer.Finish">
            <summary>
            Finishes the timer.  You can re-start a timer by calling Start();
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.IStatsDTimer.Start">
            <summary>
            Starts the timer after you call Abort() or Finish().
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.IStatsDTimer.Start(System.String)">
            <summary>Starts a nested timer.  You should call Finish() or Abort() when the timer is complete.</summary>
            <param name="taskOrMethod">The name of task or method (it is appened to this instance's counter name</param>
            <returns>A new instance of an IStatsDTimer</returns>
        </member>
        <member name="M:SAJ.Core.StatsD.IStatsDTimer.StartForMethod">
            <summary>
            Starts a nested timer using the name (only) of the current method.  You should call Finish() or Abort() when the timer is complete.
            Avoid using this call for insignificant/short methods that may be optimized away by the JIT.  Instead, use Start();
            </summary>
            <returns>A new instance of an IStatsDTimer</returns>
        </member>
        <member name="P:SAJ.Core.StatsD.IStatsDTimer.CounterName">
            <summary>
            Gets the name of the counter
            </summary>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.StatsD.StatsDTimer"/> class.</summary>
            <param name="counterName">The counter name.</param>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.Abort">
            <summary>The abort.</summary>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.Finish">
            <summary>The finish.</summary>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.Start">
            <summary>The start.</summary>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.Start(System.String)">
            <summary>The start.</summary>
            <param name="taskOrMethod">The task or method.</param>
            <returns>The <see cref="T:SAJ.Core.StatsD.IStatsDTimer"/>.</returns>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.StartForMethod">
            <summary>The start for method.</summary>
            <returns>The <see cref="T:SAJ.Core.StatsD.IStatsDTimer"/>.</returns>
        </member>
        <member name="M:SAJ.Core.StatsD.StatsDTimer.ToString">
            <summary>The to string.</summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:SAJ.Core.StatsD.StatsDTimer.CounterName">
            <summary>Gets the counter name.</summary>
        </member>
        <member name="T:SAJ.Core.StringBinaryTree">
            <summary>
            Create Binary Tree for Casing lookups
            </summary>
        </member>
        <member name="F:SAJ.Core.StringBinaryTree.binaryTreeInstance">
            <summary>
            The Instance of a StringBinaryTree
            </summary>
        </member>
        <member name="F:SAJ.Core.StringBinaryTree.additionalCasingList">
            <summary>
            List of additional strings for the default casing list that the consumer will provide
            </summary>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SAJ.Core.CasingHelper"/> class from being created.
            </summary>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.AddList(System.Collections.Generic.List{System.String})">
            <summary>
            Add list of string to Binary Tree
            </summary>
            <param name="strList">The list of strings</param>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.GetString(System.Int32)">
            <summary>
            Gets the string from the Binary Tree based on the index
            </summary>
            <param name="listidx">Index of string in Binary Tree</param>
            <returns>String from Binary Tree</returns>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.Lookup(System.Int32,System.Char)">
            <summary>
            Lookup the Char in the Binary Tree
            </summary>
            <param name="parentidx">Parent Index</param>
            <param name="c">Char to LookUp</param>
            <returns>Index of C in the Binary Tree</returns>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.Lookup(System.Char[])">
            <summary>
            Lookup a collection of Chars in the Binary Tree
            </summary>
            <param name="characters">Collection of Chars</param>
            <returns>Index of the collection of Chars in the Binary Tree</returns>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.Add(System.String)">
            <summary>
            Addes a String to the Binary Tree
            </summary>
            <param name="stringToAdd">The String to Add</param>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.FindChild(System.Int32,System.Char)">
            <summary>
            Find a Child in the Binary Tree
            </summary>
            <param name="idx">Index of Parent</param>
            <param name="f">Char to Find</param>
            <returns>Index of F in Binary Tree</returns>
        </member>
        <member name="M:SAJ.Core.StringBinaryTree.AddChild(System.Int32,System.Char)">
            <summary>
            Adds a Child to the Binary Tree
            </summary>
            <param name="idx">Index of the Parent Char</param>
            <param name="f">Char to add as child</param>
            <returns>Index of new child in Binary Tree</returns>
        </member>
        <member name="P:SAJ.Core.StringBinaryTree.Instance">
            <summary>
            Gets a new instance of the <see cref="T:SAJ.Core.CasingHelper"/> class.
            </summary>
        </member>
        <member name="P:SAJ.Core.StringBinaryTree.Count">
            <summary>
            Gets the Binary Tree's Count
            </summary>
        </member>
        <member name="T:SAJ.Core.StringBinaryTree.Btstruct">
            <summary>
            Binary Tree Struct
            </summary>
        </member>
        <member name="T:SAJ.Core.TextCaseManager">
            <summary>
            Capitalizes text
            </summary>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.TextCaseManager"/> class.
            </summary>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.TextCaseManager"/> class.
            </summary>
            <param name="useDefaultUpperList">User the default list for Capitalising</param>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SAJ.Core.TextCaseManager"/> class.
            </summary>
            <param name="useDefaultUpperList">User the default list for Capitalising</param>
            <param name="additionalUpperList">Additional words or phrases to capitalize</param>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.SetLeadingCaps(System.String)">
            <summary>
            Proper case every word in a string
            </summary>
            <param name="str">Text to proper case</param>
            <returns>Text with each word proper case</returns>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.SetLeadingCaps(System.String,System.Boolean)">
            <summary>
            Proper case every word in a string
            </summary>
            <param name="str">Text to proper case</param>
            <param name="ignoreAcronyms">This will ignore words that have no vowels, setting to false will upper case any words that have no vowels</param>
            <returns>Text with each word proper case</returns>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.SetSentenceCaps(System.String)">
            <summary>
            Proper case every word in a string
            </summary>
            <param name="str">Text to proper case</param>
            <returns>Text with each word proper case</returns>
        </member>
        <member name="M:SAJ.Core.TextCaseManager.SetSentenceCaps(System.String,System.Boolean)">
            <summary>
            Proper case a sentence or miultiple sentences
            </summary>
            <param name="str">Text to proper case</param>
            <param name="ignoreAcronyms">This will ignore words that have no vowels, setting to false will upper case any words that have no vowels</param>
            <returns>Text with each word of a new sentence upper case</returns>
        </member>
        <member name="T:SAJ.Core.ThreadedTimer">
            <summary>
            A class that wraps a thread timer
            </summary>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.#ctor(System.TimeSpan,System.Action{System.Threading.WaitHandle},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.ThreadedTimer"/> class. Creates a new threaded timer.  The callback method will execute in a worker thread.</summary>
            <param name="timeout">The delay between each call</param>
            <param name="callback">The method to execute.  Be sure your method does not raise any unhandled exceptions or your program could fail.</param>
            <param name="autoStart">True to start the timer now.</param>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.#ctor(System.Int32,System.Action{System.Threading.WaitHandle},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SAJ.Core.ThreadedTimer"/> class. Creates a new threaded timer.  The callback method will execute in a worker thread.</summary>
            <param name="timeoutInMs">The delay between each call, in milliseconds</param>
            <param name="callback">The method to execute.  Be sure your method does not raise any unhandled exceptions or your program could fail.</param>
            <param name="autoStart">True to start the timer now.</param>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Finalize">
            <summary>Finalizes an instance of the <see cref="T:SAJ.Core.ThreadedTimer"/> class. </summary>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Stop">
            <summary>
            Stops the timer and waits for any executing callback to complete.
            </summary>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Stop(System.Int32)">
            <summary>Stops the timer and waits up to timeoutInMs for any executing callback to complete</summary>
            <param name="timeoutInMs">The amount of time to wait, in milliseconds</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Stop(System.TimeSpan)">
            <summary>Stops the timer and waits up to timeoutInMs for any executing callback to complete</summary>
            <param name="timeout">The amount of time to wait</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:SAJ.Core.ThreadedTimer.Dispose(System.Boolean)">
            <summary>The dispose.</summary>
            <param name="disposing">The disposing.</param>
        </member>
        <member name="P:SAJ.Core.ThreadedTimer.CallbackIsRunning">
            <summary>
            Gets a value indicating whether all call backs are in progress.  Don't trust this value, since a call back could start or stop immediately after checking!
            </summary>
        </member>
        <member name="P:SAJ.Core.ThreadedTimer.ShouldStop">
            <summary>
            Gets or sets a value indicating whether the callbacks should stop
            </summary>
        </member>
        <member name="P:SAJ.Core.ThreadedTimer.Timeout">
            <summary>
            Gets or sets the timeout for the callback, in milliseconds.  Setting the timeout won't take effect until the next trigger, or if you restart the timer.  
            Specify a timeout of -1 milliseconds to prevent the timer from firing, specify 0 milliseconds to fire immediately.
            </summary>
        </member>
        <member name="P:SAJ.Core.ThreadedTimer.TimeoutInMs">
            <summary>
            Gets or sets the timeout for the callback, in milliseconds. Setting the timeout won't take effect until the next trigger, or if you restart the timer.
            Specify a timeout of -1 to prevent the timer from firing, specify 0 to fire immediately.
            </summary>
        </member>
        <member name="T:SAJ.Core.WaitableConcurrentQueue`1">
            <summary>
            A simple concurrent queue with an attached semaphore.  Useful for worker queues
            </summary>
            <typeparam name="T">Type to store in the Queue</typeparam>
        </member>
        <member name="M:SAJ.Core.WaitableConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            Construct a new instance of a WaitableConcurrentQueue with a maximum number of enqueued items
            </summary>
            <param name="maxEnqueued">The maximum number of items to enqueue</param>
        </member>
        <member name="M:SAJ.Core.WaitableConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item into the queue and signals the WaitOn handle
            </summary>
            <param name="item">An item to enqueue</param>
        </member>
        <member name="M:SAJ.Core.WaitableConcurrentQueue`1.Dequeue">
            <summary>
            Removes an item from the queue.  This should only be called when WaitOn.WaitOne() returns true.
            </summary>
            <returns>The item in the queue</returns>
        </member>
        <member name="M:SAJ.Core.WaitableConcurrentQueue`1.TryWaitDequeue(System.Int32,`0@)">
            <summary>
            Removes an item from the queue, waiting for a specified time for an item to be added to the queue.
            </summary>
            <param name="millisecondsTimeout">Milliseconds to wait (use Timeout.Infinite to wait forever)</param>
            <param name="instance">The instance of a queued item</param>
            <returns>The item in the queue</returns>
        </member>
        <member name="M:SAJ.Core.WaitableConcurrentQueue`1.Dispose">
            <summary>
            Disposes the built-in semaphore
            </summary>
        </member>
        <member name="P:SAJ.Core.WaitableConcurrentQueue`1.MaxEnqueued">
            <summary>
            Gets the maximum number of items that can be queued.
            </summary>
        </member>
        <member name="P:SAJ.Core.WaitableConcurrentQueue`1.WaitOn">
            <summary>
            Gets a handle to wait on
            </summary>
        </member>
        <member name="P:SAJ.Core.WaitableConcurrentQueue`1.Count">
            <summary>
            Gets the count of items in the queue
            </summary>
        </member>
        <member name="T:SAJ.Platform.Common.Constants.WcfExtensibility.PostingSessionXferConstants">
            <summary>
            Constants for the PostingSession injector/extractor process.
            </summary>
        </member>
        <member name="M:SAJ.Core.Converters.ListConverter.Convert``1(System.Collections.IList)">
            <summary>
            Converts a System.Collections.IList to a System.Collections.Generic.List<typeparamref name="T"/>"/>
            </summary>
            <param name="source">The source list.</param>
            <typeparam name="T">The System.Collections.Generic.IList Type</typeparam>
            <returns>A System.Collections.Generic.IList<typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SAJ.Core.Converters.ListConverter.Convert``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts a System.Collections.Generic.List<typeparamref name="T"/> to a System.Collections.IList"/>
            </summary>
            <param name="source">The source list.</param>
            <typeparam name="T">The System.Collections.Generic.IList Type</typeparam>
            <returns>A System.Collections.IList.</returns>
        </member>
        <member name="M:SAJ.Core.Converters.ListConverter.ConvertDomainObjectListToDataContractList``1(System.Collections.IList)">
            <summary>
            Converts a list of DomainObjects to a list of objects 
            whose underlying type is a data contract.
            Optimized for performance.
            </summary>
            <typeparam name="T">The type of data contract.</typeparam>
            <param name="domainObjects">The list of domain objects to convert.</param>
            <returns>A list of objects whose underlying type is a data contract.</returns>
        </member>
        <member name="M:SAJ.Core.Converters.ListConverter.ConvertDomainObjectListToDataContractList``2(System.Collections.Generic.IList{``1})">
            <summary>
            Converts a list of DomainObjects to a list of DataContracts.
            Optimized for performance.
            </summary>
            <param name="domainObjects">The list of domain objects to convert.</param>
            <typeparam name="T">The data contract type.</typeparam>
            <typeparam name="U">The domain object type.</typeparam>
            <returns>An ItemList of data contracts.</returns>
        </member>
        <member name="T:SAJ.Core.Converters.ListConverter.LateBoundPropertySet">
            <summary>
            Late boound property setter.
            </summary>
            <param name="target">The target object.</param>
            <param name="value">The value object.</param>
        </member>
        <member name="T:SAJ.Core.Converters.ListConverter.LateBoundPropertyGet">
            <summary>
            Late bound property getter.
            </summary>
            <param name="source">The source object.</param>
            <returns>An object.</returns>
        </member>
        <member name="T:SAJ.Core.Converters.ListConverter.GenericGetter">
            <summary>
            Generic getter.
            </summary>
            <param name="target">the target onject.</param>
            <returns>An object.</returns>
        </member>
        <member name="T:SAJ.Core.ExtensionMethods.EnumExtensionMethods">
            <summary>
            Class for all Enum extension methods.
            </summary>
        </member>
        <member name="F:SAJ.Core.ExtensionMethods.EnumExtensionMethods.LOCALE_SEPARATOR">
            <summary>
            The character by which all
            locale strings are delimited.
            </summary>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDescription(System.Enum)">
            <summary>
            Returns the description (if one exists) for an enum.
            If one does not exist, then the ToString() value is 
            returned by default.
            </summary>
            <param name="enumValue">The enumeration value.
            </param>
            <returns>The Description (if exists) or ToString().</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDescription(System.Enum,System.Int32)">
            <summary>
            Method that will return the localized version of
            an enumeration for a given locale id.  If there's no
            locale id match and it's a localized enum, then 
            the English value (localeid = 1033) is returned.  Otherwise,
            the description (if one exists) is returned.
            If there's no description at all, then the ToString() value is 
            returned by default.
            </summary>
            <param name="enumValue">The enumeration value.</param>
            <param name="localeId">The locale id.</param>
            <returns>The description for the desired locale.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDescriptionNameValues(System.Enum)">
            <summary>
            Gets a list of NameValues from an enum.
            If the enum is localized, then English (localeid = 1033) is returned. 
            </summary>
            <param name="enumValue">The enumeration.</param>
            <returns>IList of NameValuePairs.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDescriptionNameValues(System.Enum,System.Int32)">
            <summary>Gets a list of NameValues from a localized enum.</summary>
            <param name="enumValue">The enumeration.</param>
            <param name="localeId">The locale Id.</param>
            <returns>IList of NameValuePairs.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDictionaryOfDescriptions(System.Enum)">
            <summary>
            Gets a dictionary list of descriptions from an enum
            where the key is the enum value.
            If the enum is localized, then English (localeid = 1033) is used for description names. 
            </summary>
            <param name="enumValue">The enum value.</param>
            <returns> Dictionary of descriptions where the key is the enum value</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetDictionaryOfDescriptions(System.Enum,System.Int32)">
            <summary>
            Gets a dictionary list of descriptions from an enum
            where the key is the enum value.
            The specified locale is used for localized enums. 
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="localeId">The locale Id.</param>
            <returns> Dictionary of descriptions where the key is the enum value</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Will randomize a generic IList
            </summary>
            <typeparam name="T">the generic type</typeparam>
            <param name="input">the list...</param>
            <returns>the generic IList</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetValueFromDescrption(System.Enum,System.String)">
            <summary>
            Gets the enum value from the attribute description
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="description">The description.</param>
            <returns>the enum value</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetValueFromDescription(System.Enum,System.String)">
            <summary>
            Gets the enum value from the attribute description
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="description">The description.</param>
            <returns>the enum value</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.EnumExtensionMethods.GetNHibernateMemberVariableName(System.Enum,System.Boolean)">
            <summary>
            Returns the NHibernate member variable name
            for a given Domain Object Enumeration.
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="isObject">
            Flag indicating whether or not the EnumName maps to an object.
            EX: Address.
            </param>
            <returns>String representation of the NHibernate member variable name.</returns>
        </member>
        <member name="T:SAJ.Core.ExtensionMethods.CustomNonSilverlight.EnumExtensionMethods">
            <summary>
            Class for all non-Silverlight supported Enum extension methods.
            </summary>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.CustomNonSilverlight.EnumExtensionMethods.TryParse``1(System.Enum,System.Int32,``0@)">
            <summary>
            Converts the int representation of an enumeration 
            to its enumeration equivalent.
            A return values indicates whether or not the
            conversion was successful.
            </summary>
            <param name="theEnum">The enumeration to parse.</param>
            <param name="valueToParse">The int value desired within the enumeration.</param>
            <param name="returnValue">The corresponding enumeration if a match is found for the int value.</param>
            <typeparam name="T">Generic Enum type</typeparam>
            <returns>Flag indicating whether or not the int value can be converted to the desired enumeration.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.CustomNonSilverlight.EnumExtensionMethods.TryParse``1(System.Enum,System.String,``0@)">
            <summary>
            Converts the int representation of an enumeration 
            to its enumeration equivalent.
            A return values indicates whether or not the
            conversion was successful.
            </summary>
            <param name="theEnum">The enumeration to parse.</param>
            <param name="valueToParse">The string value desired within the enumeration.</param>
            <param name="returnValue">The corresponding enumeration if a match is found for the int value.</param>
            <typeparam name="T">Generic Enum type</typeparam>
            <returns>Flag indicating whether or not the int value can be converted to the desired enumeration.</returns>
        </member>
        <member name="T:SAJ.Core.ExtensionMethods.StringExtensionMethods">
            <summary>
            Class for all String extension methods.
            </summary>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.IsNumeric(System.String)">
            <summary>
            Determines if a string value is numeric (composed of integers).
            All leading and trailing whitespace is removed before evaluation.
            EX: "12453" => true
                "23s"   => false
            </summary>
            <param name="s">The string value.</param>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines if a string contains another string
            and allows a string comparison to be specified.
            This method is to be used for Linq queries on
            a collection of objects.
            </summary>
            <param name="original">The string to search.</param>
            <param name="value">The value for which to search.</param>
            <param name="comparisionType">The comparision type.</param>
            <returns>Flag indicating whether or not a match was made.
            </returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.StripNonAlphaNumericChars(System.String)">
            <summary>
            Remove all non-numeric text from input value
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ConvertNHibernateMemberVariableNameToPropertyName(System.String)">
            <summary>
            Converts an NHibernate member variable name to its
            Property name.
            EX: _contactId => ContactId
                _contact => Contact
            NOTE:  the input string must be at least 3 characters in length (including the underscore)
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>Property name.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.HasValue(System.String)">
            <summary>
            Returns true/false based on if the string is null or empty
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ToInt(System.String)">
            <summary>
            Converts the string value to an int
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ToInt(System.String,System.Int32)">
            <summary>
            Converts the string value to an int
            </summary>
            <param name="s"></param>
            <param name="defaultValue">The default value to return if s cannot convert to an integer</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ToDecimal(System.String)">
            <summary>
            Converts string to decimal
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ToDecimal(System.String,System.Decimal)">
            <summary>
            Converts string to decimal
            </summary>
            <param name="s"></param>
            <param name="defaultValue">The default value to return if s cannot convert to an integer</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.ProperCase(System.String)">
            <summary>
            
            </summary>
            <param name="textToProperCase"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.Capitalize(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.GetValueFromDescription``1(System.String)">
            <summary>
            Generically gets the enum value based on the attribute description
            </summary>
            <param name="description">The description.</param>
            <returns>the enum value</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.SafeTrim(System.String)">
            <summary>
            Returns a trimmed string, or NULL if str is NULL
            </summary>
            <param name="str">The string to trim</param>
            <returns>The string trimmed, or NULL if string is NULL</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.MakeCanonical(System.String,SAJ.Core.CanonicalFlags)">
            <summary>
            Makes a string canonical
            </summary>
            <param name="inputText">The string to make canonical</param>
            <param name="canonicalFlags">Canonical flags to use for the string</param>
            <returns>The canonicalized string</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified Unicode character or String in the current string are replaced with another specified Unicode character or String.
            </summary>
            <param name="original">the string value to seek</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace all occurrences of oldValue</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search</param>
            <returns>A string that is equivalent to the current string except that all instances of oldValue are replaced with newValue.</returns>
        </member>
        <member name="M:SAJ.Core.ExtensionMethods.StringExtensionMethods.IsSet(SAJ.Core.CanonicalFlags,SAJ.Core.CanonicalFlags)">
            <summary>
            returns true if the test flags are set in flagstotest
            </summary>
            <param name="flagstotest"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="T:SAJ.Core.NameValuePair">
            <summary>
            Used for name value pair combinations.
            </summary>
        </member>
        <member name="P:SAJ.Core.NameValuePair.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:SAJ.Core.NameValuePair.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="T:SAJ.Core.ObjectCompareUtil">
            <summary>
            Object Comparison class
            </summary>
        </member>
        <member name="M:SAJ.Core.ObjectCompareUtil.ObjectsAreEqual``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            Takes two objects and copies the values of 
            all maching properties from the Right side against those 
            on the left side.  The two objects can be completely
            different classes... Can optionally stipulate that union properties
            only be checked... this is necessary when comparing different classes.
            </summary>
            <typeparam name="Left"></typeparam>
            <typeparam name="Right"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="checkUnionPropertiesOnly">If true, then only verify the properties that are the same name and same type on each object</param>
            <param name="includeInheritedProperties"></param>
            <returns>bool</returns>
        </member>
        <member name="M:SAJ.Core.ObjectCompareUtil.CollectionOfObjectsAreEqual``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Boolean,System.Boolean)">
            <summary>
            Takes two lists of objects of either same or different type
            and loops through the left list and compares each property value against
            those of all objects in the right list.  If one of the property values
            doesn't match, then the object in the left list doesn't have a match and
            the lists are not equal, so false will be returned.  Otherwise, true will be 
            returned.
            </summary>
            <param name="leftCollection"></param>
            <param name="rightCollection"></param>
            <param name="checkUnionPropertiesOnly">If true, then only verify the properties that are the same name and same type on each object</param>
            <param name="includeInheritedProperties"></param>
            <returns>bool</returns>
        </member>
        <member name="M:SAJ.Core.ObjectCompareUtil.AreCollectionCountsTheSame``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Takes care of the initial validation of two lists, i.e., check nullability and counts
            </summary>
            <param name="collection1"></param>
            <param name="collection2"></param>
            <returns>bool</returns>
        </member>
        <member name="T:SAJ.Core.ObjectCopyUtil">
            <summary>
            Utility class for copying information from 
            one object to another
            </summary>
        </member>
        <member name="M:SAJ.Core.ObjectCopyUtil.CopyDataFromDifferentObject``2(``0,``1,System.Boolean)">
            <summary>
            Takes two objects and copies the values of 
            all maching properties from the Right side into 
            the left side.  The two objects can be completely
            different classes... only the union properties (if any)
            with be processed.
            NOTE: ALL values from the right object
            will be copied, even NULLABLE values, i.e.,
            everything in the left object will be overwritten.
            </summary>
            <typeparam name="Left"></typeparam>
            <typeparam name="Right"></typeparam>
            <param name="left">Object into which values will be copied.</param>
            <param name="right">Object from which values will be copied.</param>
            <param name="includeInheritedProperties"></param>
            <returns>Left (the object where data is to be copied)</returns>
        </member>
        <member name="M:SAJ.Core.ObjectCopyUtil.CopyDataFromDifferentObject``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            Takes two objects and copies the values of 
            all maching properties from the Right side into 
            the left side.  The two objects can be completely
            different classes... only the union properties (if any)
            with be processed.  
            NOTE: All null values from the right object
            WILL NOT be copied to the left object.
            </summary>
            <typeparam name="Left"></typeparam>
            <typeparam name="Right"></typeparam>
            <param name="left">Object into which values will be copied.</param>
            <param name="right">Object from which values will be copied.</param>
            <param name="includeInheritedProperties"></param>
            <returns>Left (the object where data is to be copied)</returns>
        </member>
        <member name="T:SAJ.Core.DataHider">
            <summary>
            This class contains helper methods for hiding data within other data.
            </summary>
        </member>
        <member name="M:SAJ.Core.DataHider.EmbedIntegerInString(System.String,System.Int32)">
            <summary>
            Embed the bits of an integer in a string and encode it.
            </summary>
            <param name="cover">
            The string that will serve as the basis for embedding
            the bits of the <paramref name="hidden"/> integer into.
            </param>
            <param name="hidden">
            The integer to be hidden within the <paramref name="cover"/>
            string.
            </param>
            <returns>
            A string from which the <paramref name="hidden"/> integer
            can later be extracted using the <see cref="M:SAJ.Core.DataHider.ExtractIntegerFromString(System.String,System.String)"/>
            method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cover"/> parameter is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the Length of the <paramref name="cover"/> parameter
            is less than the minimum 4 characters that are required.
            </exception>
        </member>
        <member name="M:SAJ.Core.DataHider.ExtractIntegerFromString(System.String,System.String)">
            <summary>
            Extract an integer from the <paramref name="display"/> string
            using the <paramref name="cover"/> string as the basis.
            </summary>
            <param name="cover">
            The string that will serve as the basis for extracting the
            returned integer. This must be the same string passed to the
            <see cref="M:SAJ.Core.DataHider.EmbedIntegerInString(System.String,System.Int32)"/> method earlier.
            </param>
            <param name="display">
            The string containing the embedded bits of the integer to
            recover.
            </param>
            <returns>
            The embedded integer recovered from the <paramref name="display"/>
            string using the <paramref name="cover"/> string as a basis.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cover"/> or the
            <paramref name="display"/> parameters are null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the Length of the <paramref name="cover"/> parameter
            is less than the minimum 4 characters that are required.
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the <paramref name="display"/> parameter could not
            be decoded.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the decoded <paramref name="display"/> parameter
            is not the correct length, based on the <paramref name="cover"/>
            parameter or when the checksum of the <paramref name="cover"/>
            value embedded in the decoded <paramref name="display"/>
            could not be verified.
            </exception>
        </member>
        <member name="M:SAJ.Core.DataHider.HiddenHashes.GetSafe32BitHashCode(System.String)">
            <summary>
            Compute the hash code from 32-bit .Net framework - converted to safe code for Silverlight
            </summary>
            <param name="astring"></param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.DataHider.HiddenHashes.GetSafe64BitHashCode(System.String)">
            <summary>
            Compute the hash code from 64-bit .Net framework - converted to safe code for Silverlight
            </summary>
            <param name="astring"></param>
            <returns></returns>
        </member>
        <member name="T:SAJ.Core.DataProtector">
            <summary>
            This class provides a .NET wrapper for the CRYPT32.DLL library in Win32.
            Two of the public, static methods of interest in this class are Encrypt
            and Decrypt. Both of these functions operate on byte arrays and return
            arrays of bytes that are encrypted or decrypted, respectively.
            </summary>
        </member>
        <member name="M:SAJ.Core.DataProtector.Encrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypt a blob of data optionally specifying a secondary entropy (secret)
            to be used to enhance the security of the resultant cipher text.
            </summary>
            <param name="plainText">A byte array that contains the unencrypted data.</param>
            <param name="optionalEntropy">
            A byte array that contains a secret that will be used to enhance the security
            of the cipher text. The optional entropy is only used when the useMachineStore
            parameter is set to true.
            </param>
            <param name="useMachineStore">
            Set to true to use the machine key to perform the cipher or
            false to use the current user's key instead.
            </param>
            <returns>A byte array containing the encrypted cipher text.</returns>
        </member>
        <member name="M:SAJ.Core.DataProtector.Decrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Decrypt cipher text previously encrypted with the Encrypt function.
            The programmer must provide a secondary entropy (secret) if one was
            used during the encryption process.
            </summary>
            <param name="cipherText">A byte array that contains the encrypted data.</param>
            <param name="optionalEntropy">
            A byte array that contains a secret that will be used to decrypt the cipher
            text. This value is required during decryption only if it was provided for
            the encryption process earlier. The optional entropy is only used when the
            useMachineStore parameter is set to true.
            </param>
            <param name="useMachineStore">
            Set to true to use the machine key to perform the cipher or
            false to use the current user's key instead.
            </param>
            <returns>A byte array containing the original, unencrypted plain text.</returns>
        </member>
        <member name="M:SAJ.Core.DataProtector.MachineDecryptString(System.String)">
            <summary>
            Decrypt an encrypted, Base64-encoded string to clear text using
            the machine key. Be aware that the machine key on the executing
            machine must match the key on the machine that was used to encrypt
            the <paramref name="cipherText"/>.
            </summary>
            <param name="cipherText">
            The encrypted, Base64-encoded string to be decrypted.
            </param>
            <returns>
            The clear text form of the <paramref name="cipherText"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the <paramref name="cipherText"/> is not properly
            Base64 encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="cipherText"/> is a null
            reference.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            Thrown when memory could not be allocated for the operation.
            </exception>
            <exception cref="T:System.ApplicationException">
            Thrown for many reasons. Usually the inner exception will
            have more detail.
            </exception>
        </member>
        <member name="M:SAJ.Core.DataProtector.MachineEncryptString(System.String)">
            <summary>
            Encrypt a clear text string using the machine key into a Base64
            encoded string suitable for transmission or storage. Be aware
            that the machine key on the executing machine must match the
            key on the machine that will be used to decrypt the result.
            </summary>
            <param name="clearText">
            The plain text string to be encrypted and then Base64 encoded.
            </param>
            <returns>
            The encrypted and Base64 encoded version of the
            <paramref name="clearText"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="clearText"/> is a null
            reference.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            Thrown when memory could not be allocated for the operation.
            </exception>
            <exception cref="T:System.ApplicationException">
            Thrown for many reasons. Usually the inner exception will
            have more detail.
            </exception>
        </member>
        <member name="T:SAJ.Core.DateUtil">
            <summary>
            Utility class for DateTime usage within SnagAJob systems.
            </summary>
            <author>Todd King</author>
        </member>
        <member name="F:SAJ.Core.DateUtil.MinDateString">
            <summary>
            The string used to construct the minimum date-time.
            </summary>
        </member>
        <member name="F:SAJ.Core.DateUtil.MaxDateString">
            <summary>
            The string used to construct the maximum date-time.
            </summary>
        </member>
        <member name="F:SAJ.Core.DateUtil.MinDate">
            <summary>
            The minimum date value.
            </summary>
        </member>
        <member name="F:SAJ.Core.DateUtil.MaxDate">
            <summary>
            The maximum date value.
            </summary>
        </member>
        <member name="M:SAJ.Core.DateUtil.GetMinDate">
            <summary>
            Gets the min date-time allowable in SnagAJob systems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.DateUtil.GetMaxDate">
            <summary>
            Gets the max date-time allowable in SnagAJob systems.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SAJ.Core.ExceptionManager">
            <summary>
            Used for exception handling and formatting
            </summary>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.GetXMLFormattedException``1(System.Exception,System.String,``0,System.String,System.String,SAJ.Core.LogReflectionSettings,System.Action{System.Xml.XmlWriter})">
            <summary>
            Returns an exception as formatted XML
            </summary>
            <typeparam name="T">The instance's Type ... which allows you to specify a specific interface to limit the details being output.</typeparam>
            <param name="exc">The exception</param>
            <param name="exceptionInformation">Description about the exception.</param>
            <param name="instance">The instance to output the state of</param>
            <param name="instanceVariableName">The instance's variable name</param>
            <param name="instanceDescription">The description of the instance being output</param>
            <param name="instanceLogSettings">The settings to use in logging the state of the instance.</param>
            <param name="additionalWrites">Allows additional custom writes to the XmlWriter instance.</param>
            <returns>A string representing information about the exception and the status of the given instance.</returns>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.GetXMLFormattedException(System.Exception,System.String)">
            <summary>
            Returns an exception as formatted XML
            </summary>
            <param name="exc">The exception</param>
            <param name="additionalInfo">The additional info</param>
            <returns>string</returns>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.GetXMLFormattedException(System.Exception,System.String,System.Action{System.Xml.XmlWriter})">
            <summary>
            Returns an exception as formatted XML
            </summary>
            <param name="exc">The exception</param>
            <param name="additionalInfo">The additional info</param>
            <param name="additionalWrites">Allows additional custom writes to the XmlWriter instance</param>
            <returns>string</returns>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.ExceptionXMLWriter(System.Exception,System.String,System.Action{System.Xml.XmlWriter})">
            <summary>
            Used to write the root/top level exception information as XML.
            All inner exceptions are then converted to XML and written out.
            </summary>
            <param name="exc"></param>
            <param name="additionalInfo"></param>
            <param name="additionalWrites"></param>
            <returns>string</returns>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.InnerExceptionXmlWriter(System.Exception,System.Xml.XmlWriter)">
            <summary>
            Used to write all inner exceptions contained within 
            the root exception.  Recursively calls itself as long
            as each inner exception has its own inner exception.
            </summary>
            <param name="innerException"></param>
            <param name="writer"></param>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.WriteCommonExceptionXmlElements(System.Exception,System.Xml.XmlWriter)">
            <summary>
            Used by various methods that need to convert the same
            exception properties and values to XML elements.
            </summary>
            <param name="exc"></param>
            <param name="writer"></param>
        </member>
        <member name="M:SAJ.Core.ExceptionManager.WriteCommonSqlExceptionXmlElements(System.Data.SqlClient.SqlException,System.Xml.XmlWriter)">
            <summary>
            Used by various methods that need to convert the same
            SQL exception properties and values to XML elements.
            </summary>
            <param name="sqlExc"></param>
            <param name="writer"></param>
        </member>
        <member name="T:SAJ.Core.GlobalConstants">
            <summary>
            Globally shared constants.
            </summary>
        </member>
        <member name="F:SAJ.Core.GlobalConstants.ACCOUNT_ID_SESSION_KEY">
            <summary>
            Well know HttpContext.Session key for the currently active AccountId
            </summary>
        </member>
        <member name="F:SAJ.Core.GlobalConstants.ACCOUNT_ID_CALL_CONTEXT_SLOT_KEY">
            <summary>
            Well known CallContext slot-key for the currently active AccountId
            </summary>
        </member>
        <member name="F:SAJ.Core.GlobalConstants.THIRD_PARTY_AFFILIATE_COOKIE">
            <summary>
            Used for cookie that gets dropped when a job seeker comes to the site with an Affiliate ref code
            </summary>
        </member>
        <member name="T:SAJ.Core.Impersonator">
            <summary>
            Impersonate a domain user. To take advantage of the IDisposable
            pattern, this class should always be constructed in a using
            statement. Pass the credentials to the constructor and perform
            any operations inside the using statement that you need to
            execute as the specified user.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">
            The LogonUser operation failed.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Windows returned the Windows NT status code STATUS_ACCESS_DENIED.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory available.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the correct permissions. 
            </exception>
        </member>
        <member name="M:SAJ.Core.Impersonator.#ctor(System.String,System.String,System.String)">
            <summary>
            Impersonate a user. This constructor should always be called
            from within a using statement to ensure that the IDisposable
            pattern is used to revert the identity on the current thread
            to the one in force before this constructor is called.
            </summary>
            <param name="domainName">
            The domain to authenticate against. May be a machine name.
            </param>
            <param name="userName">
            The user name to authenticate with.
            </param>
            <param name="password">
            The password to authenticate with.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            The LogonUser operation failed.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Windows returned the Windows NT status code STATUS_ACCESS_DENIED.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory available.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the correct permissions. 
            </exception>
        </member>
        <member name="M:SAJ.Core.Impersonator.Dispose">
            <summary>
            Dispose by reverting the user identity and closing held handles.
            This will be called automatically if you construct the Impersonator
            object from within a using statement.
            </summary>
        </member>
        <member name="T:SAJ.Core.SajEmailEncoding">
            <summary>
            Provides services to encode and decode email addresses
            </summary>
        </member>
        <member name="M:SAJ.Core.SajEmailEncoding.EncodeEmail(System.String,System.String)">
            <summary>
            Encodes an email address and appends a new email domain.  The email address cannot contain more than 62 characters.
            </summary>
            <param name="originalEmailAddress">The email address to encode</param>
            <param name="newEmailDomain">The new email address domain</param>
            <returns></returns>
        </member>
        <member name="M:SAJ.Core.SajEmailEncoding.DecodeEmail(System.String)">
            <summary>
            Decodes an email address encoded using EncodeEmail.
            </summary>
            <param name="encodedEmail">The encoded email address</param>
            <returns>The original email address</returns>
        </member>
        <member name="M:SAJ.Core.SajEmailEncoding.IsEncodedEmail(System.String)">
            <summary>
            Returns true if the email address is encoded using EncodeEmail
            </summary>
            <param name="email">The email address to check</param>
            <returns>True if the email address is encoded, false otherwise.</returns>
        </member>
        <member name="T:SAJ.Core.SajEmailEncoding.EmailEncodingException">
            <summary>
            Exception for SajEmailEncoding failures
            </summary>
        </member>
        <member name="M:SAJ.Core.SajEmailEncoding.EmailEncodingException.#ctor(System.String,System.String)">
            <summary>
             Creates a new exception object
            </summary>
            <param name="message">The exception message</param>
            <param name="email">The email causing the exception</param>
        </member>
        <member name="P:SAJ.Core.SajEmailEncoding.EmailEncodingException.EmailAddress">
            <summary>
            Gets the email address that caused the exception
            </summary>
        </member>
        <member name="T:SAJ.Core.SajEncryption">
            <summary>
            Encryption library for various SAJ encrytion needs
            </summary>
        </member>
        <member name="M:SAJ.Core.SajEncryption.ComputeMD5Hash(System.String,System.Boolean)">
            <summary>
            Converts a supplied string value to an MD5 hash.  
            Optionally converts the string value to upper case 
            before running the hashing algorithm.
            This method is currently used for searching for 
            application urls by their hash key in the database.
            </summary>
            <param name="plainText"></param>
            <param name="toUpper"></param>
            <returns>string</returns>
        </member>
        <member name="T:SAJ.Core.StackTraceFormatter">
            <summary>
            A helper class that formats stack traces to be more compact
            and more readable. For method A() calling B() calling C(),
            the compacted stack trace would read: C &lt;== B &lt;== A
            with all parameters, insignificatn spacing and line breaks
            removed.
            </summary>
        </member>
        <member name="M:SAJ.Core.StackTraceFormatter.FormatExceptionStackTrace(System.String)">
            <summary>
            Format a stack trace string with a default number of
            methods from the top of the stack.
            </summary>
            <param name="trace">
            The stack trace string to be compacted, usually taken
            from the StackTrace property in an Exception object.
            </param>
            <returns>
            The compacted stack trace string or the original string
            if an exception occurs.
            </returns>
        </member>
        <member name="M:SAJ.Core.StackTraceFormatter.FormatExceptionStackTrace(System.String,System.Int32)">
            <summary>
            Format a stack trace string with a variable number of
            methods from the top of the stack.
            </summary>
            <param name="trace">
            The stack trace string to be compacted, usually taken
            from the StackTrace property in an Exception object.
            </param>
            <param name="top">
            The number of methods from the top of the stack trace
            to include in the compacted version.
            </param>
            <returns>
            The compacted stack trace string or the original string
            if an exception occurs.
            </returns>
        </member>
        <member name="T:SAJ.Core.StringUtil">
            <summary>
            Handles all SAJ specific string functions
            </summary>
        </member>
        <member name="M:SAJ.Core.StringUtil.ParseNameFromAutoComplete(System.String)">
            <summary>
            Returns the Name from an auto completed value
            Ex:  For Brand Name = Home Depot, the
            auto complete value will read "Home Depot (100032)"
            and we need to parse "Home Depot" from the string.
            </summary>
            <param name="autoCompleteValue"></param>
            <returns>int</returns>
        </member>
        <member name="M:SAJ.Core.StringUtil.ParseIdFromAutoComplete(System.String)">
            <summary>
            Returns the id from an auto completed value
            Ex:  For Brand Name = Home Depot, the
            auto complete value will read "Home Depot (100032)"
            and we need to parse 100032 from the string.
            </summary>
            <param name="autoCompleteValue"></param>
            <returns>int</returns>
        </member>
        <member name="T:SAJ.Core.XmlHelper">
            <summary>
            Summary description for XMLHelper.
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.setRootElement(System.String)">
            <summary>
            Sets the root node if one does not already exisit
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.appendFragmentToElement(System.String,System.Xml.XmlDocumentFragment)">
            <summary>
            
            </summary>
            <param name="ParentNode"></param>
            <param name="xmlFragment"></param>
        </member>
        <member name="M:SAJ.Core.XmlHelper.createFragment(System.String,System.String)">
            <summary>
            Creates a document fragment with the supplied name and body in the xml document
            </summary>
            <param name="ParentNode"></param>
            <param name="FragmentName"></param>
            <param name="FragmentBody"></param>
            <returns>the fragment that was created</returns>
        </member>
        <member name="M:SAJ.Core.XmlHelper.createElement(System.String,System.String)">
            <summary>
            Creates a node in the XML Document
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.createElement(System.Xml.XmlElement,System.String)">
            <summary>
            Creates a node in the XML Document
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getElement(System.String)">
            <summary>
            Returns the element/node
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getElementValue(System.String)">
            <summary>
            Returns the value of an element/node
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getElementValue(System.String,System.String,System.String)">
            <summary>
            Returns the value of an element/node
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getAttribValue(System.String,System.String)">
            <summary>
            Returns the value of an attribute
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getNodeList(System.String)">
            <summary>
            Returns the node list given the node
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.createTextElement(System.String,System.String,System.String)">
            <summary>
            Creates a text node in the XML Document.
            If the full parent node is found not to exisit, the function will create it.
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.createTextElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Creates a text node in the XML Document.
            If the full parent node is found not to exisit, the function will create it.
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.removeElement(System.String,System.String)">
            <summary>
            Removes a node from the XML Document
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.updateTextElement(System.String,System.String,System.Boolean)">
            <summary>
            Updates the value of a node in the XML Document
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.addAttribute(System.Object,System.String,System.String)">
            <summary>
            The following will add an attribute to a node if it exisits		
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.findElement(System.String)">
             <summary>
             This sub will look for a parent elemnt and create it if it cannot find it
             The parent node should be separated by a "/".
             Ex. "xml/node1/node2"
            
             It will begin by looking for the first node.  If it cannot be found it will be
             created.  It will move to the next and so on...
            
             The procedure assume the first node in the list should be the root.
             </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.applyStyleSheet(System.IO.Stream)">
            <summary>
            This function will accept an XSL string or a url to an xsl file
            The stlye sheet will be applied to the XML and a string result returned
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.applyStyleSheet(System.String,SAJ.Core.XmlHelper.XSLType)">
            <summary>
            This function will accept an XSL string or a url to an xsl file
            The stlye sheet will be applied to the XML and a string result returned
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.xmlHTTPSend(System.String,System.String,System.String)">
            <summary>
            Sends the XML Doc via XMLHTTP
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.loadXML(System.String)">
            <summary>
            Loads an XML string into the XML Document
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getXML">
            <summary>
            Returns the XML Document as a string
            </summary>
        </member>
        <member name="M:SAJ.Core.XmlHelper.getXMLDocument">
            <summary>
            Returns the XML Document as a XMLDocument object
            </summary>
        </member>
    </members>
</doc>
